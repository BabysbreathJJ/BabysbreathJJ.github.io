<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿菁菁菁菁菁</title>
  <subtitle>Change takes time.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lijingjing.top/"/>
  <updated>2017-01-20T15:07:58.000Z</updated>
  <id>http://lijingjing.top/</id>
  
  <author>
    <name>阿菁菁菁菁菁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode(一)</title>
    <link href="http://lijingjing.top/blog/2017/01/19/LeetCode-%E4%B8%80/"/>
    <id>http://lijingjing.top/blog/2017/01/19/LeetCode-一/</id>
    <published>2017-01-19T12:36:11.000Z</published>
    <updated>2017-01-20T15:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hamming-Distance"><a href="#Hamming-Distance" class="headerlink" title="Hamming Distance"></a>Hamming Distance</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, calculate the Hamming distance.<br>Note: 0 ≤ x, y &lt; 2^31.</p>
<pre><code>Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; x</div><div class="line"> * @param &#123;number&#125; y</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> quotientX = x;</div><div class="line">    <span class="keyword">var</span> remainderX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> quotientY = y;</div><div class="line">    <span class="keyword">var</span> remainderY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> distance = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!(quotientX == <span class="number">0</span> &amp;&amp; remainderX == <span class="number">0</span>) || !(quotientY == <span class="number">0</span> &amp;&amp; remainderY == <span class="number">0</span>)) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        remainderX = quotientX % <span class="number">2</span>;</div><div class="line">        quotientX = <span class="built_in">parseInt</span>(quotientX / <span class="number">2</span>);</div><div class="line"></div><div class="line">        remainderY = quotientY % <span class="number">2</span>;</div><div class="line">        quotientY = <span class="built_in">parseInt</span>(quotientY / <span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (remainderX != remainderY) &#123;</div><div class="line">            distance += <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> distance;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="Top-solution"><a href="#Top-solution" class="headerlink" title="Top solution"></a>Top solution</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; x</div><div class="line"> * @param &#123;number&#125; y</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> xor = x^y;</div><div class="line">    <span class="keyword">var</span> distance = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</div><div class="line">    <span class="comment">//判断条件可以改为xor&gt;0,不必每次循环31次</span></div><div class="line">    &#123;</div><div class="line">        distance+=xor&gt;&gt;i &amp; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> distance;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; x</div><div class="line"> * @param &#123;number&#125; y</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Number</span>(x ^ y).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>, <span class="string">''</span>).length;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Number-Complement"><a href="#Number-Complement" class="headerlink" title="Number Complement"></a>Number Complement</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation. Note:</p>
<pre><code>1.    The given integer is guaranteed to fit within the range of a 32-bit signed integer.
2.    You could assume no leading zero bit in the integer’s binary representation.
</code></pre><p><strong>Example 1</strong></p>
<pre><code>Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
</code></pre><p><strong>Example 2</strong></p>
<pre><code>Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
</code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="提交代码-1"><a href="#提交代码-1" class="headerlink" title="提交代码"></a>提交代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; num</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> topBitIndex, max;</div><div class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">        topBitIndex = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.log(num) / <span class="built_in">Math</span>.LN2) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        topBitIndex = <span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    max = <span class="built_in">Math</span>.pow(<span class="number">2</span>, (topBitIndex)) - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> result = max ^ num;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="Top-Solution"><a href="#Top-Solution" class="headerlink" title="Top Solution"></a>Top Solution</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; num</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> mask = ~<span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (num &amp; mask)&#123;</div><div class="line">       mask &lt;&lt;= <span class="number">1</span>;</div><div class="line">       &#125;<span class="comment">//位运算求解最高位为1的位置</span></div><div class="line">   <span class="keyword">return</span> ~mask &amp; ~num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Max-Consecutive-Ones"><a href="#Max-Consecutive-Ones" class="headerlink" title="Max Consecutive Ones"></a>Max Consecutive Ones</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: [1,1,0,1,1,1]
Output: 3
Explanation:
The first two digits or the last three digits are consecutive 1s.

The maximum number of consecutive 1s is 3.
</code></pre><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="提交代码-2"><a href="#提交代码-2" class="headerlink" title="提交代码"></a>提交代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            temp+=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(temp &gt; max)</div><div class="line">            &#123;</div><div class="line">                max = temp;</div><div class="line">            &#125;</div><div class="line">            temp = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(temp &gt; max)</div><div class="line">    &#123;</div><div class="line">        max = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="Top-Solution-1"><a href="#Top-Solution-1" class="headerlink" title="Top Solution"></a>Top Solution</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line"></div><div class="line">        sum = (sum+nums[i])*nums[i];</div><div class="line">        <span class="keyword">if</span>(sum &gt; max)</div><div class="line">        &#123;</div><div class="line">        max = sum;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>JS中所有的数都是浮点数，所以整除’/‘得到的是小数。</li>
<li>关于二进制的相关运算要考虑运用位运算来解决。</li>
<li>换底公式求解以2为底的对数运算，Math.log(num) / Math.LN2</li>
<li>~否运算，求解时会连最高位符号位一起求解。</li>
<li>负数由补码表示，即正数取反（连同符号位）后加1，得到对应的补码。否运算操作结束后得到补码，减1再取反得到相应的十进制值，然后符号位不变。</li>
</ol>
<pre><code>3: 00000000000000000000000000000011
~3: 11111111111111111111111111111100(第一位为1，表示负数，此为补码形式)
转化为十进制，减1：            
11111111111111111111111111111011
取反：
00000000000000000000000000000100
即为： -4
简单记忆为： 一个数与自身取反值相加，值为-1.
</code></pre>]]></content>
    
    <summary type="html">
    
      Hamming Distance &amp;   Number Complement &amp;  Max Consecutive One
    
    </summary>
    
      <category term="LeetCode" scheme="http://lijingjing.top/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://lijingjing.top/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>JS闭包</title>
    <link href="http://lijingjing.top/blog/2017/01/02/JS%E9%97%AD%E5%8C%85/"/>
    <id>http://lijingjing.top/blog/2017/01/02/JS闭包/</id>
    <published>2017-01-02T13:59:04.000Z</published>
    <updated>2017-01-04T08:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。一般创建方式是在一个函数内部创建另一个函数。</p>
<p>JS代码块支持函数作用域，即定义在函数中的参数和变量在函数外部是不可见的，而在一个函数内部任何位置定义的变量，在该函数内部任何地方都可见（函数内部变量声明提升）。</p>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><h3 id="一般函数"><a href="#一般函数" class="headerlink" title="一般函数"></a>一般函数</h3><p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链。然后使用arguments和其他命名参数的值来初始化函数的活动对象(activation object)。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位…依次类推，直至到作为作用域链终点的全局执行环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">v1,v2</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(v1&lt;v2)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v1&gt;v2)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = compare(<span class="number">5</span>,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>以上代码先定义compare()函数，然后又在全局作用域中调用它。当第一次调用compare()时，会创建一个包含this、arguments、v1和v2的活动对象。全局执行环境的变量对象(包含this、result和compare)在compare()执行环境的作用域链中则处于第二位。具体如下图所示：</p>
<p><img src="/images/function1.png" alt="execution context"></p>
<p>后台的每个执行环境都有一个表示变量的对象，即变量对象。全局环境的变量对象始终存在，而像compare()函数这样的局部环境的变量函数，则只在函数执行的过程中存在。</p>
<p>在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部[[scope]]属性中。当调用compar()函数时，会为函数创建一个执行环境，然后通过赋值函数的[[scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象）被创建并被推入执行环境作用域链的顶端。对于上例，compare()函数的执行环境，包括本地活动对象和全局变量对象。<strong>作用域链本质上是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。</strong></p>
<p>无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般，当函数执行完毕后，局部活动对象就会被销毁，内存中只保存全局作用域（全局执行环境的变量对象）。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在函数内部定义的函数会包含它所在的函数（即外部函数）的活动对象，将其添加到它的作用域链中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> v1 = obj1[propertyName];</div><div class="line">		<span class="keyword">var</span> v2 = obj2[propertyName];</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(v1 &gt; v2)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v1 &lt; v2)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建函数</span></div><div class="line"><span class="keyword">var</span> compare = createComparisonFunction(<span class="string">"name"</span>);</div><div class="line"></div><div class="line"><span class="comment">//调用函数</span></div><div class="line"><span class="keyword">var</span> result = compare(&#123;<span class="attr">name</span> : <span class="string">"Jingjing"</span>&#125;,&#123;<span class="attr">name</span> : <span class="string">"JJ"</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//解除对匿名函数的引用（以便释放内存）</span></div><div class="line">compare = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>下面以图来具体说明以上代码作用域链：</p>
<ol>
<li><p>createComparisonFunction(“name”)执行中<br><img src="/images/closure1.png" alt="execution context"></p>
</li>
<li><p>createComparisonFunction(“name”)执行结束后<br><img src="/images/closure2.png" alt="execution context"></p>
</li>
<li><p>compare({name : “Jingjing”},{name : “JJ”})执行中<br><img src="/images/closure3.png" alt="execution context"></p>
</li>
<li><p>compare({name : “Jingjing”},{name : “JJ”})执行结束后<br><img src="/images/closure4.png" alt="execution context"></p>
</li>
<li><p>compare置为null后<br><img src="/images/closure5.png" alt="execution context"></p>
</li>
</ol>
<h2 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h2><p>作用域链的配置，使闭包只能取得包含函数中任何变量的<strong>最后</strong>一个值。闭包保存的是整个变量对象，而不是某个特殊的变量。   </p>
<p>下面举个最常见的例子来说明：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">		result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">createFunctions();</div><div class="line"><span class="comment">//result[0] = 10;</span></div><div class="line"><span class="comment">//result[1] = 10;</span></div><div class="line"><span class="comment">//result[2] = 10;</span></div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//result[9] = 10;</span></div></pre></td></tr></table></figure>
<p>期望是每个函数返回自己的索引值，即result[0]=0,result[1]=1….但实际上，因为每个函数的作用域链中都保存着createFunctions的活动对象（active object）,每个函数其实引用的都是同一个变量i。当createFunction()返回后，i的值变为10，所以每个函数内部的i的值都是10。</p>
<p>解决方法：通过创建另一个匿名函数，强制让闭包的行为符合预期。具体实现如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">		result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">return</span> num;</div><div class="line">			&#125;</div><div class="line">		&#125;(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">createFunctions();</div><div class="line"><span class="comment">//result[0] = 0;</span></div><div class="line"><span class="comment">//result[1] = 1;</span></div><div class="line"><span class="comment">//result[2] = 2;</span></div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//result[9] = 9;</span></div></pre></td></tr></table></figure>
<p>上述例子中，没有把闭包直接赋值给数组，而是定义了一个匿名函数，把匿名函数的执行结果赋值给数组。匿名函数有一个参数num，即匿名函数的返回值。在调用每个匿名函数的时候，传入变量i，由于函数参数按值传递，所以将变量i的当前值复制给参数num。而在这个匿名函数内部，又创建了一个访问num的闭包。</p>
<p><em>在给result数组赋值的时候调用了匿名函数，调用过程中会有对应的执行环境以及活动对象，匿名函数执行完，匿名函数的闭包，即result数组中的每个函数的作用域链中都有自己调用时匿名函数的活动对象。</em></p>
<p>这样，result数组中的每个函数都有自己num变量的一个副本，因此就可以返回各自不同的值了。</p>
<h2 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>闭包中使用this会出现一些问题。this对象实在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。 <strong>不过匿名函数的执行环境具有全局性。</strong> 因此，匿名函数的this对象通常指向window。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"My object"</span>,</div><div class="line">	</div><div class="line">	<span class="attr">getNameFunction</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name;<span class="comment">// "TypeError: this is undefined" (在严格模式下)</span></div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(object.getNameFunction()());</div><div class="line"><span class="comment">// "The window"(在非严格模式下，匿名函数的this指向window)</span></div></pre></td></tr></table></figure>
<h3 id="访问外部函数的特殊变量"><a href="#访问外部函数的特殊变量" class="headerlink" title="访问外部函数的特殊变量"></a>访问外部函数的特殊变量</h3><p>每个函数在被调用时都会自动取得两个特殊变量： this和arguments。内部函数在搜索这两个变量时，只会搜索到自己的活动对象位置，因此永远不可能直接访问外部函数中的这两个变量。不过把外部作用域中的this对象保存在一个闭包中能够访问的对象里，就可以让闭包访问外部函数的this对象了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"My object"</span>,</div><div class="line">	</div><div class="line">	<span class="attr">getNameFunction</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">	</div><div class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   		<span class="keyword">return</span> that.name;   </div><div class="line">   		&#125;;		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(object.getNameFunction()());</div><div class="line"><span class="comment">// "My Object"</span></div></pre></td></tr></table></figure>
<p>在定义匿名函数之前，把this对象赋值给了that变量。定义了闭包之后，闭包也可以访问这个变量，因为它是我们在包含函数中特意声明的变量，及时在函数返回后，that也仍然引用着object。</p>
<p>同样，如果想要访问作用域中的arguments对象，必须将该对象的引用保存在另一个闭包能够访问的变量中。</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>细微的语法变化，可能会意外修改this的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The window"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"My object"</span>,</div><div class="line">	</div><div class="line">	<span class="attr">getName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   		<span class="keyword">return</span> <span class="keyword">this</span>.name;   	</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">object.getName();<span class="comment">// "My object"</span></div><div class="line">(object.getName)();<span class="comment">//"My object"</span></div><div class="line">(object.getName = object.getName)();<span class="comment">//"The window",在非严格模式下;严格模式下，‘TypeError: this is undefined’</span></div></pre></td></tr></table></figure>
<p>第一行调用，this.name就是object.name。<br>第二行调用，加上括号后，引用函数，this的值得到了维持，因为object.getName和（object.getName）的定义是相同的。<br>因为第三行调用，先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值不能得到维持，在非严格模式下，this指向window。</p>
]]></content>
    
    <summary type="html">
    
      JS闭包总结
    
    </summary>
    
      <category term="javascript" scheme="http://lijingjing.top/categories/javascript/"/>
    
    
      <category term="闭包" scheme="http://lijingjing.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>再见，2016。你好，2017</title>
    <link href="http://lijingjing.top/blog/2017/01/02/%E5%86%8D%E8%A7%81%EF%BC%8C2016/"/>
    <id>http://lijingjing.top/blog/2017/01/02/再见，2016/</id>
    <published>2017-01-02T05:36:26.000Z</published>
    <updated>2017-01-02T13:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>新年快乐。</p>
<p>矫情还是在深夜发作比较好。这样发完之后就可以安稳的去睡觉。这是我2017年1月1日凌晨给好友发祝福信息时说的话。</p>
<p>放一张图片，假装我2016年很快乐。<br><img src="/images/my2016.jpeg" alt="2016"></p>
<p>本来想着2016年就这么默默地过去就好了吧，毕竟我太期待2017了，迫不及待想要拥抱新的生活，去展开新的诗篇。我的2016真的不怎么美好，一点儿都不留恋、怀念以及舍不得，更不用说什么感恩了。但是中午实在没有感觉想要学习，在元旦假期的最后一天中午，利用这段时间来写点儿东西好了。</p>
<p>如果非要感谢什么的话，那我只能感谢2016年让我成长很多。</p>
<p>2016年的一月份和二月份好像还在做最美食的项目。记得过年那几天还一直在深夜开过语音会议，但是做最美食真的真的让我成长不少。我记得半夜解决拍照上传的问题，效率出奇的高。然后觉着很多问题真的是你认真去解决就可以解决好的。期间和策女神和鑫爷做项目也让我很开心。虽然那段日子繁忙但是现在回想起来好像还可以说是美好的时光了吧。和学弟还有亦谦住各种五星级酒店，拍拍照片，然后开会的时候大家一起嘻嘻哈哈怼甲方不合理的需求，真的很喜欢这种team，大家都很努力，很认真，一起成长。然后还记得和妈妈在包饺子的时候收到了任老师发来的新年红包，超级开心。寒假的时候还想着在2016年要努力学技术，成为一个厉害的前端。然而…</p>
<p>然后好像就开学了吧。开学后发现同组的小明大神已经搭建好了博客，虽然我一直说要搭建，但是懒癌患者一直在拖延，在小明的刺激下，一晚上搭好了现在这个博客，当然期间换过一次主题，现在用的主题自己其实改了不少东西。</p>
<p>接着就是蔡老师劝我回可视化组做自己组的项目。其实我当时也是打算做完软工项目就回归的。但是蔡老师好像以为我不想回来，苦口婆心和我说了很多。发生了很多事情的三月份就开始了。三月初，发小霖霖来上海玩，一起浪了几天，很感谢陈思远带我们去朱家角。虽然事实证明的确没什么好玩的，但毕竟也去打过卡了。</p>
<p>霖霖走后的第二天参加年级聚会，看完电影就很想认识一个男孩子，然而在一群老司机的带领下我最后还是翻了船，然后，我的三、四、五、六、七、八、九、十月份就在各种纠结与不甘心以及莫名其妙的各种复杂情绪下度过。期间的所有不安与失落。估计也就只有我自己知道了，现在回想起来，自己真的没做好什么，但也不能说自己做错什么吧，毕竟我不觉着真心喜欢一个人，并努力去争取的过程有什么不对以及需要忏悔的，如果有的话，也是由于第一次这么主动，不能处理好所有的慌乱与紧张以及不正常的自己吧。</p>
<p>三月份侯欣然回国，又剪了一次短发，以至于我现在非常坚定的确定我还是比较喜欢长发的自己。</p>
<p>三月份开始做爱淘课的项目，第一次和小明合作项目，然后现在我发现我们两个还是比较适合一起努力学习写自己喜欢的代码。</p>
<p>一直到十月份真的就是各种慌乱、不安以及乱七八糟。四五六月份的自己在发疯，真的没什么好记录的吧。</p>
<p>七月份的时候每晚都在跑步，然后也会背一些单词，还一度很坚定的要出国。不过之后还是觉着好好毕业，找份好工作比较适合我吧。从高中开始跑步，大学断断续续也一直在坚持，然后研究生也在断断续续的跑步，和小明一起跑过步，和望姐一起跑过，也和胡洁琼一起跑过。最后发现自己还不错。就像刚开始上大学的时候，一个人从图书馆出来去操场跑步再回宿舍一样。今年就是各种怀念原来潇洒而且很酷的自己。</p>
<p>暑假左右在做实验室的外高桥项目。真的是一个很讨厌的项目，用别人的前端框架，就是各种复制拷贝什么的，唯一有挑战的问题还是IE8兼容，宝宝真的想少做点这种项目。</p>
<p>九月份的时候见回国的吕秋一，丢了只用了三个月的6S，然后九月底玩滑板还很惨的把胳膊摔骨折了，以至于我的十一假期有三个星期，但我觉着也因为我在家那三个星期，让自己平静了不少吧，可以想很多乱七八糟的事情，整理自己的心情。</p>
<p>十月份回学校，之前的水务项目也不用自己去跟了。然后就是接着做九月份接的二次外包项目。因为自己之前已经做的差不多了，之后还有大饼帮我一起做，由于胳膊的原因，也没有让我做很多事情。但是做这个二次外包却意外的逼我自己去写了angular的directive，让我觉着也还不错。</p>
<p>十一月份开始自己好像比原来开心点了。开始学钢琴，每晚会去光彪楼弹一两个小时的钢琴。期间还去牙防所拔了四颗一直折磨我的智齿，还补了一颗蛀牙。</p>
<p>哦，对了，今年还当了实验室的大总管，下半年又做了教务办的助管。这些，对我来说，都是一种锻炼吧。虽然说实话，如果有选择我肯定不会主动去做这些。</p>
<p>十二月份就是准备实验室的双旦晚会，准备了好久，还好我的学弟学妹们都比较捧场。很感谢期间一直帮我的胡洁琼以及最后一天帮我布置会场的小明、佳薇、顺婷以及水哥。还有开题的事情，谢谢一起奋斗的小明以及毕业的学长余博。</p>
<p>2016年好像心理的成长更多，但是我也觉着这样挺好的，不至于让自己一直处于小孩子的心态。</p>
<p>我的幼稚我的可笑我的焦躁我的无理取闹以及我所有慌乱与不安，都随着2016一起消失或者停留在过去吧。</p>
<p>我的未来，希望做一个温柔明媚骄傲的自己，成长为一个很厉害的前端程序媛。</p>
<p>2017目标以及计划：</p>
<ol>
<li>好好梳理前端知识，学习react，总结angular经验，动手写node。</li>
<li>好好写毕设，顺利毕业，希望不用在18年的元旦赶论文。</li>
<li>能找到一份自己喜欢的实习以及工作。</li>
<li>早睡早起，好好对自己。</li>
<li>有时间可以去旅行。</li>
<li>如果能成长为一个厉害的前端就更好了。</li>
<li>坚持学钢琴。</li>
<li>好好跑步。</li>
<li>多读书。</li>
<li>希望18年回首的时候，上面的计划与目标都不是空话。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新年快乐。&lt;/p&gt;
&lt;p&gt;矫情还是在深夜发作比较好。这样发完之后就可以安稳的去睡觉。这是我2017年1月1日凌晨给好友发祝福信息时说的话。&lt;/p&gt;
&lt;p&gt;放一张图片，假装我2016年很快乐。&lt;br&gt;&lt;img src=&quot;/images/my2016.jpeg&quot; alt=&quot;20
    
    </summary>
    
      <category term="随笔" scheme="http://lijingjing.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="年终总结" scheme="http://lijingjing.top/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ES6 let&amp;const</title>
    <link href="http://lijingjing.top/blog/2017/01/01/ES6-let-const/"/>
    <id>http://lijingjing.top/blog/2017/01/01/ES6-let-const/</id>
    <published>2017-01-01T15:01:48.000Z</published>
    <updated>2017-01-02T12:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>JS的变量作用域是函数域而不是块级作用域，这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</div><div class="line">		alert(i);</div><div class="line">	&#125;</div><div class="line">	alert(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//outputNumbers(3);</span></div><div class="line"><span class="comment">//alert(0);</span></div><div class="line"><span class="comment">//alert(1);</span></div><div class="line"><span class="comment">//alert(2);</span></div><div class="line"><span class="comment">//alert(3);</span></div></pre></td></tr></table></figure></p>
<p>函数中定义了for循环，在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会被销毁。但在JS中，变量i是定义在函数outputNumbers中的活动对象，因此从它定义开始，就可以在函数内部随处访问它。即使像下面错误的重新声明一个变量，也不会修改它的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</div><div class="line">		alert(i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> i;</div><div class="line">	alert(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//outputNumbers(3);</span></div><div class="line"><span class="comment">//alert(0);</span></div><div class="line"><span class="comment">//alert(1);</span></div><div class="line"><span class="comment">//alert(2);</span></div><div class="line"><span class="comment">//alert(3);</span></div></pre></td></tr></table></figure></p>
<p>JS中函数声明会被提升。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">outputNumbers(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">	alert(i);</div><div class="line">	<span class="comment">//变量i被提升，alert出undefined。</span></div><div class="line">	<span class="comment">//如果变量	没有提升，则会抛出i is not defined的异常。</span></div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</div><div class="line">		alert(i);</div><div class="line">	&#125;		</div><div class="line">&#125;</div><div class="line"><span class="comment">//alert: undefined;</span></div><div class="line"><span class="comment">//alert: 0;</span></div><div class="line"><span class="comment">//alert: 1;</span></div><div class="line"><span class="comment">//alert: 2;</span></div></pre></td></tr></table></figure></p>
<h2 id="JS模仿块级作用域"><a href="#JS模仿块级作用域" class="headerlink" title="JS模仿块级作用域"></a>JS模仿块级作用域</h2><p>JS从来不会告诉你是否多次声明了一个变量，遇到多次声明的情况，只会对后续的声明视而不见（不过，它会执行后续生命中的变量初始化）。<br>匿名函数可以模仿块级作用域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将函数声明，加上圆括号变成函数表达式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//这里是块级作用域</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对圆括号中，表示它实际上是一个函数表达式。</p>
<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</div><div class="line">			alert(i);</div><div class="line">		&#125;	</div><div class="line">	&#125;)();</div><div class="line">	</div><div class="line">	alert(i);<span class="comment">//i is not defined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在for循环外部插入了一个私有作用域，在匿名函数中定义的任何变量，都会在执行结束时被销毁，因此，变量i只能在循环中使用，使用后立即被销毁，而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。</p>
<h2 id="为什么要有块级作用域"><a href="#为什么要有块级作用域" class="headerlink" title="为什么要有块级作用域"></a>为什么要有块级作用域</h2><p>一般来说，我们都应该尽量向去全局作用域添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突。而通过创建私有作用域，每个开发人员既可以使用自己的变量，又不必担心搞乱全局作用域。</p>
<h2 id="let特性"><a href="#let特性" class="headerlink" title="let特性"></a>let特性</h2><ol>
<li>let声明的变量拥有块级作用域。</li>
<li>let声明的全局变量不是全局对象的属性。即不能通过window.变量名的方式访问这些变量。它们只存在于一个不可见的块的作用域中，这个块理论上是web页面中运行的所有JS代码的外层块。</li>
<li>形如for(let x …)的循环在每次迭代时都会为x创建新的绑定,即每个循环是不同的变量绑定，占用不同的内存，不会发生循坏最后引用的是同一个内存的变量。这种情况适用于for-of/for-in/以及传统分号分割的循环。</li>
<li>let声明的变量不会被提升。在声明之前使用变量会报错。</li>
<li>var声明的变量可以重复声明，但是let重复声明会报错。</li>
</ol>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h2 id="ES5-防篡改对象"><a href="#ES5-防篡改对象" class="headerlink" title="ES5 防篡改对象"></a>ES5 防篡改对象</h2><h3 id="不可扩展对象"><a href="#不可扩展对象" class="headerlink" title="不可扩展对象"></a>不可扩展对象</h3><p>默认情况下，所有对象都是可以扩展的。即，任何时候都可以向对象中添加属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Jingjing'</span>&#125;;</div><div class="line">person.age = <span class="number">23</span>;<span class="comment">//为person对象添加age属性</span></div></pre></td></tr></table></figure></p>
<p>使用Object.preventExtensions()方法可以防止之后给对象添加属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Jingjing'</span>&#125;;</div><div class="line"><span class="built_in">Object</span>.preventExtensions(person);</div><div class="line"></div><div class="line">person.age = <span class="number">23</span>;</div><div class="line">alert(person.age);<span class="comment">//非严格模式下undefined；严格模式下抛出错误</span></div></pre></td></tr></table></figure></p>
<p>虽然不可以添加新成员，但是可以修改和删除已有的成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Jingjing'</span>&#125;;</div><div class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.preventExtensions(person);</div><div class="line">person.name = <span class="string">"JJ"</span>;</div><div class="line"></div><div class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//false</span></div><div class="line">alert(person.name);<span class="comment">// JJ</span></div></pre></td></tr></table></figure></p>
<h3 id="密封的对象"><a href="#密封的对象" class="headerlink" title="密封的对象"></a>密封的对象</h3><p>密封对象不可扩展，而且已有的成员的[[Configurable]]特性将设置为false。意味着不能删除属性和方法，因为不能使用Object.defineProperty()把数据属性修改为访问器属性,或者相反。属性值是可以修改的。</p>
<p>密封对象，可以使用Object.seal()方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Jingjing'</span>&#125;;</div><div class="line"><span class="built_in">Object</span>.seal(person);</div><div class="line"></div><div class="line">person.age = <span class="number">23</span>;</div><div class="line">alert(person.age);<span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person.name;</div><div class="line">alert(person.name);<span class="comment">// 'Jingjing'</span></div><div class="line"><span class="comment">//严格模式下，上面两个alert均会抛出错误。</span></div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	var person = &#123;name: 'Jingjing'&#125;;</div><div class="line">	alert(Object.isExtensible(person));//true</div><div class="line">	alert(Object.isSealed(person));/false</div><div class="line">	</div><div class="line">	Object.seal(person);</div><div class="line">	</div><div class="line">	alert(Object.isExtensible(person));//false</div><div class="line">alert(Object.isSealed(person));/true</div></pre></td></tr></table></figure>
<h3 id="冻结的对象"><a href="#冻结的对象" class="headerlink" title="冻结的对象"></a>冻结的对象</h3><p>最严格的防篡改级别是冻结对象。冻结的对象既不可扩展，又是密封的。而且对象数据属性[[Writable]]特性会被设置为false。如果定义[[Set]]函数，访问器属性仍然是科协的。</p>
<p>对于JS库的作者来说，冻结对象很有用。因为JS库最怕有人意外（或有意）修改库中的核心对象。冻结（或密封）主要的库函数能够防止这些问题。</p>
<p>ES5定义的Object.freeze()方法可以用来冻结对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//严格模式下会抛出错误</span></div><div class="line">	<span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Jingjing'</span>&#125;;</div><div class="line">	<span class="built_in">Object</span>.freeze(person);</div><div class="line">	</div><div class="line">	person.age = <span class="number">23</span>;</div><div class="line">	alert(person.age); <span class="comment">// undefined</span></div><div class="line">	</div><div class="line">	<span class="keyword">delete</span> person.name;</div><div class="line">	alert(person.name);<span class="comment">// 'Jingjing'</span></div><div class="line">	</div><div class="line">	person.name = <span class="string">'JJ'</span>;</div><div class="line">	alert(person.name);<span class="comment">// 'Jingjing</span></div></pre></td></tr></table></figure></p>
<p>可以用Object.isFrozen()方法来检测冻结对象。也可以用Object.isExtensible()和Object.isSealed()检测冻结对象将分别返回false和true来检测。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var person = &#123;name: 'Jingjing'&#125;;</div><div class="line">alert(Object.isExtensible(person));//true</div><div class="line">alert(Object.isSealed(person));/false</div><div class="line">alert(Object.isFrozen(person));//false</div><div class="line"></div><div class="line">Object.freeze(person);</div><div class="line"></div><div class="line">alert(Object.isExtensible(person));//false</div><div class="line">alert(Object.isSealed(person));/true</div><div class="line">alert(Object.isFrozen(person));//true</div></pre></td></tr></table></figure></p>
<h2 id="const特性"><a href="#const特性" class="headerlink" title="const特性"></a>const特性</h2><p>const和其他语言中常量定义一样，即声明的变量要在声明时赋值，不可以随意修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a ;<span class="comment">//会报SyntaxError,必须赋值</span></div></pre></td></tr></table></figure></p>
<p>对于原始类型来说，由于内存中存的就是具体的值，被赋值之后是不可以修改的；但是对于变量，由于存的是地址，地址不可变，但是地址所指的空间里的内容可以改变的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="string">"test"</span>;</div><div class="line">a = <span class="string">"update"</span>;<span class="comment">//会报SyntaxError</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = &#123;<span class="attr">lastname</span>: <span class="string">'li'</span>&#125;;</div><div class="line">name.lastname = <span class="string">"Lee"</span>;</div><div class="line"><span class="built_in">console</span>.log(name.lastname);<span class="comment">//输出为 Lee</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = &#123;<span class="attr">lastname</span>: <span class="string">'li'</span>&#125;;</div><div class="line">name = &#123;<span class="string">'firstname'</span>: <span class="string">'JJ'</span>&#125;;<span class="comment">//SyntaxError: redeclaration of const name</span></div></pre></td></tr></table></figure>
<p>const的作用域同样是块级作用域。</p>
]]></content>
    
    <summary type="html">
    
      ES6关键字let和const
    
    </summary>
    
      <category term="javascript" scheme="http://lijingjing.top/categories/javascript/"/>
    
    
      <category term="let const" scheme="http://lijingjing.top/tags/let-const/"/>
    
  </entry>
  
  <entry>
    <title>React(二)</title>
    <link href="http://lijingjing.top/blog/2016/12/27/React-%E4%BA%8C/"/>
    <id>http://lijingjing.top/blog/2016/12/27/React-二/</id>
    <published>2016-12-27T05:52:50.000Z</published>
    <updated>2017-01-02T08:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><p>一个组件就是一个状态机：对于特定的输入，它总会返回一致的输出。</p>
<p>React为每个组件提供了生命周期钩子函数去响应不同的时刻——创建时、存在期及销毁时。这些时刻出现的顺序——从实例化开始，到活动期，直到最后被销毁。</p>
<h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><p>React的组件拥有简洁的生命周期API，它仅仅提供你所需要的方法，而不会去追求全面。</p>
<h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>一个实例初次被创建时所调用的生命周期方法与其他各个后续实例被创建时所调用的方法略有不同。当你首次使用一个组件类时，你会看到西面这些方法依次被调用：</p>
<ul>
<li>getDefaultProps</li>
</ul>
<p>对于组件类来说，这个方法只会被调用一次。对于那些没有被父辈组件指定props属性的新建实例来说，这个方法返回的对象可用于为实例设置默认的props值。<br><em>任何复杂的值，比如对象和数组，都会在所有的实例中共享，而不是拷贝或者克隆。</em></p>
<ul>
<li>getInitialState</li>
</ul>
<p>对于组件的每个实例来说，这个方法的调用次数有且只有一次。在这里你将有机会初始化每个实例的state。与getDefaultProps方法不同的是，每次实例创建时该方法都会被调用一次。在这个方法里，可以访问到this.props.</p>
<ul>
<li>componentWillMount</li>
</ul>
<p>该方法会在完成首次渲染之前被调用。这也是在render方法调用前可以修改组件state的最后一次机会。</p>
<ul>
<li>render</li>
</ul>
<p>在这里会创建一个虚拟DOM，用来表示组件的输出。对于一个组件来说，render是唯一一个必需的方法，并且有特定的规则。render方法需要满足以下几点：<br>（1）只能通过this.props和this.state访问数据<br>（2）可以返回null/false或者任何React组件<br>（3）只能出现一个顶级组件（不能返回一组元素）<br>（4）必须纯净，意味着不能改变组件的状态或者修改DOM的输出</p>
<p><em>render方法返回的结果不是真正的DOM，而是一个虚拟的表现，React随后会把它和真实的DOM（内存中的DOM表现，而非浏览器中的）作对比，来判断是否有必要做出修改。</em></p>
<ul>
<li>componentDidMount</li>
</ul>
<p>在render方法成功调用并且真实的DOM已经被渲染之后，可以在componentDidMount内部通过this.getDOMNode()方法访问到它。</p>
<p>比如：当你需要测量渲染出DOM元素的高度，或者使用计时器来操作它，亦或运行一个自定义的jQuery插件时，可以将这些操作挂载到这个方法上。<br>eg:假设需要在一个通过React渲染出的表单元素上使用jQuery UI的Autocomplete插件，则可以这样使用它：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要自动补全的字符串列表</span></div><div class="line"><span class="keyword">var</span> datasource = [...];</div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">...</span> /&gt;</span>;</span></div><div class="line">	&#125;,</div><div class="line">	componentDidMount: function()&#123;</div><div class="line">		$(this.getDOMDNode()).autocomplete(&#123;</div><div class="line">			source : datasource</div><div class="line">	&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>==当React运行在服务端时，componentDidMount方法不会被调用。==</p>
<p><em>对于该组件类的所有后续应用，将会看到下面的方法依次被调用。getDefaultProps方法不在列表中</em></p>
<ul>
<li>getInitialState</li>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ul>
<h3 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h3><p>此时，组件已经渲染好并且用户可以与它进行交互。通常是通过一次鼠标店家，手指点按或者是键盘事件来出发一个事件处理器。随着用户改变了组件或者整个应用的state，便会有新的state流入组件树，并且我们将会获得操控它的机会。</p>
<p>随着应用状态的改变，以及组件逐渐受到影响，你将会看到下面的方法依次被调用：</p>
<ul>
<li>componentWillReceiveProps</li>
</ul>
<p>在任意时刻，组件的props都可以通过父辈组件来更改。出现这种情况时，componentWillReceiveProps方法会被调用，也将获得更改props对象及更新state的机会。</p>
<ul>
<li>shouldComponentUpdate</li>
</ul>
<p>通过调用shouldComponentUpdate方法在组件渲染时进行精确优化可以使react更快。<br><em>在首次渲染期间或者调用了forceUpdate之后，这个方法不会被调用</em></p>
<ul>
<li>componentWillUpdate</li>
</ul>
<p>和componentWillMount方法类似，组件会在接收到新的props或者state进行渲染之前，调用该方法。</p>
<p><em>不可以在该方法中更新state或者props，而应该借助componentWillReceiveProps方法在运行时更新state</em></p>
<ul>
<li>render</li>
<li>componentDidUpdate</li>
</ul>
<p>和componentDidMount方法相似，该方法给了我们更新已经渲染好的DOM的机会。</p>
<h3 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h3><p>最后，当该组件被使用完成后，componentWillUnmount方法将会被调用，目的是给这个实例提供清理自身的机会。</p>
<p>每当React使用完一个组件，这个组件就必须从DOM中卸载随后被销毁。此时，仅有的一个钩子函数会做出响应，完成所有的清理和销毁工作，这很必要。</p>
<p>componentWillUnmount,该方法会在组件被移除之前被调用，让你有机会做些清理工作。在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或者添加的事件监听器。</p>
<h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>在React中，数据的流向是单向的——从父节点传递到子节点，因而组件是简单且易于把握的，它们只需要从父节点获取props渲染即可。如果顶层组件的某个prop改变了，React会递归的向下遍历整棵组件树，重新渲染所有使用这个属性的组件。</p>
<p>组件内部还具有自己的状态，这些状态只能在组件内修改。React组件本身很简单，可以把它们看成一个函数，它接受props和state作为参数，返回一个虚拟的DOM表现。</p>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>props就是properties的缩写，可以使用它把任意类型的数据传递给组件。</p>
<p>可以在挂载组件时设置它的props:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> survey = [&#123;<span class="attr">title</span>:<span class="string">'SuperHeroes'</span>&#125;];</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ListSurveys</span> <span class="attr">survey</span>=<span class="string">&#123;surveys&#125;/</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>或者调用组件实例的setProps方法（很少需要这么做）来设置其props:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> survey = [&#123;<span class="attr">title</span>:<span class="string">'SuperHeroes'</span>&#125;];</div><div class="line"><span class="keyword">var</span> listSurveys = React.render(</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">ListSurveys</span>/&gt;</span></span></div><div class="line">	<span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">);</div><div class="line">listSurveys.setProps(&#123; <span class="attr">surveys</span>: surveys&#125;);</div></pre></td></tr></table></figure></p>
<p><em>只能在子组件或者在组件树外(上例)调用setProps。千万别调用this.setProps或者直接修改this.props，如果需要，使用state。</em></p>
<p>可以通过this.props访问props,但绝不能通过这种范式修改它。一个组件绝对不可以自己修改自己的props。</p>
<p>在JSX中<br>(1)可以把props设置为字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">'/surveys/add'</span>&gt;Add survey&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure></p>
<p>(2)可以使用{}语法设置注入JS传递任意类型的变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&#123;<span class="string">'/surveys/‘+ survey.id&#125;&gt;&#123;survey.title&#125;&lt;/a&gt;</span></div></pre></td></tr></table></figure></p>
<p>(3)可以把props设置成一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ListSurveys = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> props = &#123;</div><div class="line">			<span class="attr">one</span> : <span class="string">'foo'</span>,</div><div class="line">			<span class="attr">two</span> : <span class="string">'bar'</span></div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SurveyTable</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span>;</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>(4) 可以用来添加事件处理器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SaveButton = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">'button save'</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">		);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><p>通过在组件中定义一个配置对象，提供一种验证props的方式。组件初始化时，如果传递的属性和propTypes不匹配，则会打印一个consoel.warn日志。<br>如果是可选的配置，则可以去掉.isRequired。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SurveyTableRow = React.createClass(&#123;</div><div class="line">	<span class="attr">propTypes</span>:&#123;</div><div class="line">		<span class="attr">survey</span>: React.propTypes.shape(&#123;</div><div class="line">			<span class="attr">id</span>: React.PropTypes.number.isRequired</div><div class="line">		&#125;).isRequired,</div><div class="line">		<span class="attr">onClick</span>: React.propTypes.ufnc</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h2><p>可以为组件添加getDefaultProps函数来设置属性的默认值。不过，这应该只针对那些非必须属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SurveyTable = React.createClass(&#123;</div><div class="line">	<span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">surveys</span>:[]</div><div class="line">		&#125;;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><em>getDeafultProps并不是在组件实例化时被调用的。而是在React.createClass调用时就被调用了，返回值会被缓存起来。也就是说，不能在getDefaultProps中使用任何特定的<em>实例数据</em>。</em></p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>每一个React组件都可以拥有自己的state，state与props的区别在于前者只存在于组件的内部。</p>
<p>state可以用来确定一个元素的视图状态。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CountryDropdown = React.createClass(&#123;</div><div class="line">	<span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">showOptions</span>: <span class="literal">false</span></div><div class="line">		&#125;; 	</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> options;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.state.showOptions)&#123;</div><div class="line">			options = (</div><div class="line">				<span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">'options'</span>&gt;</span></span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>China<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">			);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">"dropDown"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span> Choose a country <span class="tag">&lt;/<span class="name">label</span>&gt;</span>.&#123;options&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">showOptions</span>: <span class="literal">true</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上例中，state被用来记录是否在下拉框中显示可选项。</p>
<p>state可以通过setState来修改，也可以使用上面出现的getInitialState方法提供一组默认值。只要setState被调用，render就会被调用。<em>如果render函数的返回值有变化，虚拟DOM就会更新，真实的DOM也会被更新，最终用户就会在浏览器中看到变化。</em>  </p>
<p>不能直接修改this.state，永远要使用this.setState方法修改。</p>
<h2 id="state和props"><a href="#state和props" class="headerlink" title="state和props"></a>state和props</h2><p>不要在state中保存计算出的值，而应该只保存最简单的数据，即那些组件正常工作时的必要数据。比如：下拉选框是否显示的布尔值。</p>
<p>不要尝试把props复制到state中，要尽可能把props当作数据源。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>使用props在整个组件树中传递数据和配置</li>
<li>避免在组件内部修改this.props或调用this.setProps，请把props当作制度的</li>
<li>使用props来做时间处理器，与子组件通信</li>
<li>使用state存储简单的视图状态，比如下拉框是否可见这样的状态</li>
<li>使用this.setState来设置状态，而不要使用this.state直接修改状态</li>
</ul>
]]></content>
    
    <summary type="html">
    
      《React引领未来的用户界面开发框架》
    
    </summary>
    
      <category term="读书笔记" scheme="http://lijingjing.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="http://lijingjing.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React (一)</title>
    <link href="http://lijingjing.top/blog/2016/12/26/React-%E4%B8%80/"/>
    <id>http://lijingjing.top/blog/2016/12/26/React-一/</id>
    <published>2016-12-26T12:04:05.000Z</published>
    <updated>2017-01-02T08:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>React发源自Facebook的PHP框架XHP的一个分支。XHP作为一个PHP框架，旨在有请求进来时渲染整个页面。React的产生就是为了把这种重新渲染整个页面的PHP式工作流带到客户端应用中来。<br>React本质上是一个”状态机“，可以帮助开发者管理复杂的随着时间而变化的状态，以一个精简的模型实现了这一点。React只关心两件事：</p>
<ol>
<li>更新DOM</li>
<li>响应事件</li>
</ol>
<p>React不处理Ajax、路由和数据存储，也不规定数据组织的方式。它不是一个Model-View-Controller框架。如果非要问它是什么，它就是MVC中的”V“.</p>
<p>在每次状态改变时，使用JS重新渲染整个页面会异常慢，这应该归咎于读取和更新DOM的性能问题。React运用一个<em>虚拟的DOM</em>实现了一个非常强大的渲染系统，在React中<em>对DOM只更新不读取</em>。</p>
<p>React以渲染函数为基础。这些函数读入当前的状态，将其转换为目标页面上的一个虚拟表现，只要React被告知状态有变化，它就会重新运行这些函数，计算出页面的一个新的虚拟表现，接着自动地把结果转换成必要的DOM更新来反映新的表现。</p>
<p>虽然看上去比通常的按需更新每一个元素的JS方案要慢，但是React使用了非常高效的算法，计算出虚拟页面当前版本和新版本间的差异，基于这些差异对DOM进行必要的最少更新。</p>
<p><em>React赢在最小化重绘，并避免了不必要的DOM操作。</em></p>
<p>React的<em>虚拟表示差异算法</em>，不但能够把这些问题的影响降到最低（通过在单个周期内进行最小的更新），还能简化应用的维护成本。当用户输入或者有其他更新导致状态改变时，我们只要简单地通知React状态改变了，它就能自动化地处理剩下的事情。</p>
<p>React在整个应用中只使用单个事件处理器，并且会把所有的事件委托到这个处理器上。这一点也提升了React的性能，因为如果有很多事件处理器也会导致性能问题。</p>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>JSX（JavaScript XML），一种在React组件内部构建标签的类XML语法。使用JSX可以提高组件的可读性。JSX最后只是被简单地转化成对应的JS函数，但是JSX更令其他开发人员熟悉、语义化和直观。</p>
<p>JSX特征：</p>
<ol>
<li>JSX是一种句法变换——每一个JSX节点都对应着一个JS函数。</li>
<li>JSX既不提供也不需要运行时库。</li>
<li>JSX并没有改变或添加JS的语义——它只是简单的函数调用而已。</li>
</ol>
<p><em>JSX和HTML的不同</em><br>(1) <em>属性</em>，在HTML中用内联的方式给每个节点设置属性，eg:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"some-id"</span> <span class="attr">class</span>=<span class="string">"some-class-name"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>JSX以同样的方式实现了属性的设置，同时还提供了将属性设置为动态JS变量的便利。要设置动态的属性，你需要把原本用引号括起来的文本替换成花括号包裹的JS变量。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var surveyQuestionId = this.props.id;</div><div class="line">var classes = 'some-class-name';</div><div class="line">...</div><div class="line">&lt;div id = &#123;surveyQuestionId&#125;  className=&#123;classes&#125;&gt;...&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div id=&#123;this.getSurveyId()&#125;&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>React每渲染一个组件时，我们制定的变量和函数会被求值，而最终生成的DOM结构会反映出这个新的状态。</p>
<p>(2) <em>条件判断</em>，在React中，可以利用JS实现循环和条件判断。<br>在组件中添加条件判断很困难，因为if/else逻辑很难用HTML标签来表达。直接往JSX中加入if语句会渲染出无效的JS。<br>解决方法：<br><em>使用三目运算符；</em><br>虽然对于文本来说三目运算符可以正常运行，但是如果想在其他情况下很好地应用React Component，三目运算符就可能显得笨重又麻烦。对于这些情况最好是使用以下方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span></span></span></div><div class="line">		<span class="attr">this.state.isComplete</span> ? '<span class="attr">is-complete</span>' <span class="attr">:</span> ''</div><div class="line">	&#125;&gt;...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><em>设置一个变量并在属性中引用它；</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">getIsComplete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.state.isComplete ? <span class="string">'is-complete'</span> : <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> isComplete = <span class="keyword">this</span>.getIsComplete();</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;isComplete&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><em>将逻辑转化到函数中；</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">getIsComplete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.state.isComplete ? <span class="string">'is-complete'</span> : <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">this.getIsComplete</span>()&#125;&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><em>使用&amp;&amp;运算符；</em><br>由于对于null或者false值React不会输出任何内容，因此可以使用一个后面跟随了期望字符串的布尔值来实现条件判断。如果这个布尔值为true，那么后续的字符串就会被使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;this.state.isComplete</span> &amp;&amp; '<span class="attr">isComplete</span>'&#125;&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>(3) 非DOM属性<br>下面的属性只在JSX中存在</p>
<ul>
<li>key<br>key是一个可选的唯一标识符，在程序运行的过程中，一个组件可能会在组件树中调整位置，比如当用户在进行搜索操作时，或者当一个列表中的物品被增加、删除时。当这些情况发生时，组件可能并不需要被销毁并重新创建。<br>通过给组件设置一个独一无二的键，并确保它在一个渲染周期中保持一致，使得React能够更智能地决定应该重新重用一个组件，还是销毁并重新创建一个组件，进而提升渲染性能。当两个已经存在于DOM中的组件交换位置时，React能够匹配对应的键并进行相应的移动，且不需要完全重新渲染DOM。</li>
<li>ref<br>ref允许父组件在render方法之外保持对子组件的一个引用。在JSX中，可以通过在属性中设置期望的引用名来定义一个引用。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInput"</span> <span class="attr">...</span>/&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后就可以再组件中的任何地方使用<code>this.refs.myInput</code>获取这个引用，通过引用获取到的对象被称为支持实例。它并不是真的DOM，而是React在需要时用来创建DOM的一个描述对象。可以使用<code>this.refs.myInput.getDOMNode()</code>访问真实的DOM节点。</p>
<ul>
<li>dangerouslySetInnerHTML<br>有时候需要将HTML内容设置为字符串，尤其是使用了通过字符串操作DOM的第三方库时。为了提升React的互操作性，这个属性允许你使用HTML字符串。然而如果你能避免使用它的话，就还是不要使用。要让这个属性发挥作用，你需要把字符串设置到一个主键为_html的对象里，像这样：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> htmlString = &#123;</div><div class="line">	<span class="attr">_html</span>: <span class="string">"&lt;span&gt;html&lt;/span&gt;"</span></div><div class="line">&#125;;</div><div class="line">	<span class="keyword">return</span> &lt;div dangerouslySetInnerHTML=&#123;htmlString&#125;&gt;&lt;div&gt;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>(4) 事件<br>在JSX中，捕获一个事件就像给组件的方法设置一个属性一样简单。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;...&#125;,</div><div class="line"><span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &lt;div onClick=&#123;this.handleClick&#125;&gt;...&lt;div&gt;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>React自动绑定了组件所有方法的作用域，因此不需要手动绑定。</p>
<p>(5) 注释<br>JSX本质上就是JS，可以再标签内添加原生的JS注释。注释用以下两种形式添加：</p>
<ul>
<li><p>当做一个元素的子节点</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	&#123;/* a comment about this input with multiple lines*/&#125;</div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email Address"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>内联在元素的属性中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span></span></div><div class="line">	/* <span class="attr">a</span> <span class="attr">comment</span> <span class="attr">about</span> <span class="attr">this</span> <span class="attr">input</span> <span class="attr">with</span> <span class="attr">multiple</span> <span class="attr">lines</span>*/</div><div class="line">	<span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email Address"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span></span></div><div class="line">	<span class="attr">name</span>=<span class="string">"email"</span> // <span class="attr">a</span> <span class="attr">single-line</span> <span class="attr">comment</span></div><div class="line">	<span class="attr">placeholder</span>=<span class="string">"Email Address"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>(6) 特殊属性<br>由于JSX会转换为原生的JS函数，因此有一些关键词我们是不能使用的——如for和class。<br>要给表单里的标签添加for属性需要使用htmlFor.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">'for-text'</span> <span class="attr">...</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">...</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>(7) 样式<br>React把所有的内联样式都规范化为了驼峰形式，与JS中DOM的style属性一致。添加一个自定义的样式属性，只需简单把驼峰形式的属性名以及期望的CSS值拼装为对象即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> style = &#123;</div><div class="line">	<span class="attr">borderColor</span>: <span class="string">"#999"</span>,</div><div class="line">	<span class="attr">borderThickness</span>: <span class="string">"1px"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">React.renderComponent(<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,node);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      《React引领未来的用户界面开发框架》
    
    </summary>
    
      <category term="读书笔记" scheme="http://lijingjing.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="http://lijingjing.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>利用Angular Directive实现table tree</title>
    <link href="http://lijingjing.top/blog/2016/11/29/%E5%88%A9%E7%94%A8Angular-Directive%E5%AE%9E%E7%8E%B0table-tree/"/>
    <id>http://lijingjing.top/blog/2016/11/29/利用Angular-Directive实现table-tree/</id>
    <published>2016-11-29T08:40:46.000Z</published>
    <updated>2017-01-02T08:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p> 依然是Cadillac的项目中碰到的，媒设老师只要给设计稿，感觉所有的代码都要自己敲，没有省事的方法了。设计图如下： <img src="/images/Cadillac_statistic.png" alt="Cadillac_statistic"><br> 想了一想，项目前端主要使用的是AngularJS，所以自己应该写指令来实现这种表现形式。</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p> 实现思路是，考虑全部展开的形式，通过点击事件来判断，哪些<tr>可以显示，哪些</tr><tr>是要隐藏的。并且利用Angular里的ng-repeat-start和ng-repeat-end来控制repeat的dom节点。由此，可以得到item下面的areas,areas中的每个area又有sales。第一栏table的分配宽度为30%，通过</tr><tr>里第一个<td>的文字位置，来模拟树形结构的展开形式，大区的第一栏字体靠左，MAC字体居中，经销商字体居右。</td></tr></p>
<h2 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sale-table</span> <span class="attr">class</span>=<span class="string">"sale-table"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">items</span> <span class="attr">ng-repeat-start</span>=<span class="string">"item in items"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">items</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">areas</span> <span class="attr">ng-repeat-start</span>=<span class="string">"area in areas"</span> <span class="attr">item-id</span>=<span class="string">"item.area"</span> <span class="attr">area</span>=<span class="string">"area"</span> <span class="attr">ng-show</span>=<span class="string">"item.area == showArea"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">areas</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sales</span> <span class="attr">ng-repeat</span>=<span class="string">"sale in sales"</span> <span class="attr">area-id</span>=<span class="string">"area.area"</span> <span class="attr">sale</span>=<span class="string">"sale"</span></span></div><div class="line">           <span class="attr">ng-show</span>=<span class="string">"(area.area == showSale)&amp;&amp;(item.area == showArea)"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">sales</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat-end</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat-end</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sale-table</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JS文件"><a href="#JS文件" class="headerlink" title="JS文件"></a>JS文件</h2><h3 id="sale-table"><a href="#sale-table" class="headerlink" title="sale-table"></a>sale-table</h3><p> sale-table是table tree的最外层，规定了表格的表头,展开和收起的控制逻辑也在这个指令里。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saleTableFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;table class="data table table-bordered statistic-table" style="text-align: center;"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;tr class="table-header"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="30%"&gt;大区&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;全部车系&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;SRX&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;XTS&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;ATS-L&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;CT6&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;XT5&lt;/th&gt;'</span> +</div><div class="line">        <span class="string">'&lt;th class="data-th" width="10%"&gt;CTS&lt;/th&gt; &lt;/tr&gt;'</span> +</div><div class="line">        <span class="string">'&lt;tbody ng-transclude&gt;&lt;/tbody&gt;&lt;/table&gt;'</span>,</div><div class="line">        <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">          <span class="comment">//第二层，MAC展开收起控制逻辑</span></div><div class="line">            $scope.$on(<span class="string">'getArea'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">              <span class="comment">//拿到当前区域下的MAC信息</span></div><div class="line">                $scope.areas = data.areas;</div><div class="line">              <span class="comment">//如果当前点击id为之前存储的id，则由展开变为收起形式</span></div><div class="line">                <span class="keyword">if</span> ($scope.showArea == data.itemId) &#123;</div><div class="line">                    $scope.showArea = <span class="number">-1</span>;</div><div class="line">                    $scope.showSale = <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//否则，将当前点击的id存储，但是之前所有的经销商项都收起</span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    $scope.showArea = data.itemId;</div><div class="line">                    $scope.showSale = <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">          <span class="comment">//第三层，经销商展开和收起控制逻辑</span></div><div class="line">            $scope.$on(<span class="string">'getSale'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">                $scope.sales = data.sales;</div><div class="line">                <span class="built_in">console</span>.log(data.areaId);</div><div class="line">                <span class="keyword">if</span> ($scope.showSale == data.areaId)</div><div class="line">                    $scope.showSale = <span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    $scope.showSale = data.areaId;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><p> saleItemFunc是items的指令函数。其中showMiddleArea函数来获取当前大区的id，并通过这个id难道所有的MAC区信息，通过变量showArea和当前点击的item的id做比较，来判断MAC信息节点的展开和收起，在areas指令里，通过ng-show条件判断来控制当前的MAC信息是否显示。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">areas</span>  <span class="attr">ng-show</span>=<span class="string">"item.area == showArea"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">areas</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saleItemFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?saleTable'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">item</span>: <span class="string">'=item'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;tr&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td left-text"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="all-area" ng-click="showMiddleArea()"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.area&#125;&#125;'</span> +</div><div class="line">        <span class="string">'&lt;span class="ion-chevron-down"&gt;&lt;/span&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt; &lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td red-color"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.lines&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.srx&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.xts&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.ats&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.ct6&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.xt5&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;item.cts&#125;&#125; &lt;/td&gt; &lt;/tr&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, saleTableController</span>) </span>&#123;</div><div class="line">          <span class="comment">//实际情况应该和后台交互，拿到当前大区下的所有MAC信息</span></div><div class="line">            scope.showMiddleArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                scope.areas = [&#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'MAC1'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">2744</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">800</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">345</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">975</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">800</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">345</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">975</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'MAC2'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">5856</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">265</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">324</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">265</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">324</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'MAC3'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">2344</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">334</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">53</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">234</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">32</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">123</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'MAC4'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">7356</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">324</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">221</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">553</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">321</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">451</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">763</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'MAC5'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">5356</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">224</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">323</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">518</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">341</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">171</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">623</span></div><div class="line">                &#125;];</div><div class="line">                scope.data = &#123;<span class="attr">itemId</span>: scope.item.area, <span class="attr">areas</span>: scope.areas&#125;;</div><div class="line">                scope.$emit(<span class="string">'getArea'</span>, scope.data);</div><div class="line"></div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="areas"><a href="#areas" class="headerlink" title="areas"></a>areas</h3><p> areas为MAC信息的指令。其主要思想和上层大区指令的思想一样。并且通过当前MAC的id和点击存储的id进行比较，以及当前展开的item的id是否为点击存储的item的id,两个条件同时来控制最后一层经销商信息是否展开。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sales</span>  <span class="attr">ng-show</span>=<span class="string">"(area.area == showSale)&amp;&amp;(item.area == showArea)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sales</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">areasFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?saleTable'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">itemId</span>: <span class="string">'=itemId'</span>,</div><div class="line">            <span class="attr">area</span>: <span class="string">'=area'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;tr&gt;&lt;td class="data-td middle-text"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="all-area" ng-click="showLastArea()"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.area&#125;&#125;'</span> +</div><div class="line">        <span class="string">'&lt;span class="ion-chevron-down"&gt;&lt;/span&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt; &lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td red-color"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.lines&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.srx&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.xts&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.ats&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.ct6&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.xt5&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;area.cts&#125;&#125; &lt;/td&gt;&lt;/tr&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, saleTableController</span>) </span>&#123;</div><div class="line">          <span class="comment">//实际项目中应与后台交互拿到相关的经销商信息</span></div><div class="line">            scope.showLastArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                scope.sales = [&#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'经销商一'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">2744</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">800</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">345</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">975</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">800</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">345</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">975</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'经销商二'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">5856</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">265</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">324</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">265</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">324</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'经销商三'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">2344</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">334</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">235</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">53</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">234</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">32</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">123</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'经销商四'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">7356</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">324</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">221</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">553</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">321</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">451</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">763</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    <span class="attr">area</span>: <span class="string">'经销商五'</span>,</div><div class="line">                    <span class="attr">lines</span>: <span class="number">5356</span>,</div><div class="line">                    <span class="attr">srx</span>: <span class="number">224</span>,</div><div class="line">                    <span class="attr">xts</span>: <span class="number">323</span>,</div><div class="line">                    <span class="attr">ats</span>: <span class="number">518</span>,</div><div class="line">                    <span class="attr">ct6</span>: <span class="number">341</span>,</div><div class="line">                    <span class="attr">xt5</span>: <span class="number">171</span>,</div><div class="line">                    <span class="attr">cts</span>: <span class="number">623</span></div><div class="line">                &#125;];</div><div class="line">                scope.data = &#123;<span class="attr">areaId</span>: scope.area.area, <span class="attr">sales</span>: scope.sales&#125;;</div><div class="line">                scope.$emit(<span class="string">'getSale'</span>, scope.data);</div><div class="line"></div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sales"><a href="#sales" class="headerlink" title="sales"></a>sales</h3><p> 关于经销商的指令，思想同上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">salesFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?saleTable'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">areaId</span>: <span class="string">'=areaId'</span>,</div><div class="line">            <span class="attr">sale</span>: <span class="string">'=sale'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;tr class="gray-bg"&gt;&lt;td class="data-td right-text"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="all-area"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.area&#125;&#125;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt; &lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td red-color"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.lines&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.srx&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.xts&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.ats&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.ct6&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.xt5&#125;&#125;&lt;/td&gt;'</span> +</div><div class="line">        <span class="string">'&lt;td class="data-td"&gt;'</span> +</div><div class="line">        <span class="string">'&#123;&#123;sale.cts&#125;&#125; &lt;/td&gt;&lt;/tr&gt;'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p><img src="/images/Cadillac_statistic1.jpeg" alt="Cadillac_statistic"><br><img src="/images/Cadillac_statistic2.jpeg" alt="Cadillac_statistic"><br><img src="/images/Cadillac_statistic3.jpeg" alt="Cadillac_statistic"></p>
]]></content>
    
    <summary type="html">
    
      利用AngularJS的指令实现表格中的树形结构
    
    </summary>
    
      <category term="AngularJS" scheme="http://lijingjing.top/categories/AngularJS/"/>
    
    
      <category term="Directive" scheme="http://lijingjing.top/tags/Directive/"/>
    
  </entry>
  
  <entry>
    <title>HTML5触摸界面设计与开发</title>
    <link href="http://lijingjing.top/blog/2016/11/16/HTML5%E8%A7%A6%E6%91%B8%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/"/>
    <id>http://lijingjing.top/blog/2016/11/16/HTML5触摸界面设计与开发/</id>
    <published>2016-11-16T06:11:39.000Z</published>
    <updated>2016-11-17T09:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-创建一个简单的内容型网站"><a href="#第二章-创建一个简单的内容型网站" class="headerlink" title="第二章 创建一个简单的内容型网站"></a>第二章 创建一个简单的内容型网站</h1><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p> CSS选择器要避免使用后代选择器，因为浏览器解析CSS是从右向左的，即如果它看到一个如”nav ul li a”的规则时，它首先必须获得所有匹配a的元素列表，然后检查看它是不是li的后代，再按相同规则继续检查。后代建渣器虽然看起来很方便，但是它的开销是最大的。</p>
<h2 id="em和px"><a href="#em和px" class="headerlink" title="em和px"></a>em和px</h2><p> 一个单位的em总是代表当前的字体大小，em主要用于排版，而不是布局，px才是用来对网页进行布局的最简单的单位。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  viewport就是一个虚拟的窗口，viewport的边缘代替浏览器的边缘，成为了窗口的边缘。<br></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">width</td>
<td style="text-align:left">设置viewport的宽度，默认值为980，允许的取值范围是200~10000</td>
</tr>
<tr>
<td style="text-align:left">height</td>
<td style="text-align:left">设置viewport的高度。默认值是通过宽度和设备宽高比计算出来的，允许的取值范围是223~10000</td>
</tr>
<tr>
<td style="text-align:left">initial-scale</td>
<td style="text-align:left">设置viewport的出事比例。默认值是通过计算使得整个页面在可见区域内。范围由minimum-scale和maximum-scale属性决定</td>
</tr>
<tr>
<td style="text-align:left">maximum-scale</td>
<td style="text-align:left">设置viewport的最大比例。默认值是5.0。允许的取值范围为0~10.0</td>
</tr>
<tr>
<td style="text-align:left">user-scaleable</td>
<td style="text-align:left">决定用户是否可以缩放视图。还可以防止文本开始输入时的滚动</td>
</tr>
</tbody>
</table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用媒体查询来创建样式的分界点。移动浏览器不可以调整大小，并且没有标准的宽度。任何在移动设备上运行的网页的布局必须是灵活的。我觉着作者的意思应该是，不要写死在移动浏览器中的宽度吧。</p>
<h1 id="第三章-提高第一次加载的速度"><a href="#第三章-提高第一次加载的速度" class="headerlink" title="第三章 提高第一次加载的速度"></a>第三章 提高第一次加载的速度</h1><h2 id="第一次加载速度"><a href="#第一次加载速度" class="headerlink" title="第一次加载速度"></a>第一次加载速度</h2><p>第一次加载速度是用”首字节的时间”测量的，即从用户请求该页面到第一个字节从服务器下载下来的这段时间，此处”首字节的时间”实际上是用来测量”延迟”的。</p>
<h2 id="浏览器如何加载页面"><a href="#浏览器如何加载页面" class="headerlink" title="浏览器如何加载页面"></a>浏览器如何加载页面</h2><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><ol>
<li>浏览器将一个包含域名的请求发送给DNS服务器</li>
<li>DNS服务器返回对应的IP地址</li>
<li>为了提高性能，减少DNS服务器上的负载，DNS查找机制会被浏览器、设备及设备和服务器之间的路由器和代理服务器缓存。这就是为什么更改DNS记录可能需要几天才能生效的原因。</li>
</ol>
<h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><ol>
<li>浏览器向由DNS查找得到的IP地址的主机发起TCP连接。</li>
<li>然后发送请求，请求中包含网址、浏览器信息、浏览器能接受的数据类型（编码和语言），以及所有相关的cookie，包含域和路径的cookie。</li>
</ol>
<h3 id="下载响应"><a href="#下载响应" class="headerlink" title="下载响应"></a>下载响应</h3><p> 浏览器开始下载响应，随着响应流的到达，浏览器解析HTML并识别出更多的资源。然后浏览器开始获取这些资源。</p>
<h3 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h3><p>浏览器会尽快开始渲染页面。如果页面中外链了CSS或脚本文件时，浏览器会等到这些文件加载和解析（如果是JS，则还需要执行）完再渲染页面。</p>
<h2 id="页面加载缓慢原因"><a href="#页面加载缓慢原因" class="headerlink" title="页面加载缓慢原因"></a>页面加载缓慢原因</h2><h3 id="HTTP连接数"><a href="#HTTP连接数" class="headerlink" title="HTTP连接数"></a>HTTP连接数</h3><p>一个HTTP请求不是只下载数据那么简单，每次请求都包含一定量的额外开销。所以，连续不断的请求许多小文件会比一次请求一个大文件慢很多。<br>为当前域创建两个别名，能允许更多的下载并行，会使大文件下载的性能明显改善。不过由于每个域都需要进行DNS查找，添加太多的域反而会更慢，使用至少两个，至多不超过五个域名是YSlow的经验法则。  另一个要考虑的是cookie，如果cookie有几千个字节，那么此后发送到这个域的每次请求都将把这些字节包含在请求头里，然后发送。服务器还必须在读取请求体之前读取这些cookie。cookie可以把一个很小的请求变得很大。</p>
<h3 id="总字节数"><a href="#总字节数" class="headerlink" title="总字节数"></a>总字节数</h3><p>被下载资源的大小也是影响页面加载速度的原因，所以任何能降低下载资源大小的行为都是值得做的。</p>
<h3 id="等待时的渲染阻塞"><a href="#等待时的渲染阻塞" class="headerlink" title="等待时的渲染阻塞"></a>等待时的渲染阻塞</h3><p>将script标签放到页面尾部。script标签将会阻塞后续的HTML的渲染，直到它所包含的脚本已经下载到本地，并解析执行完毕。当你把外部的JS放在页面头部时，只有在所有脚本加载完后，用户才能看到网页。</p>
<h3 id="网络延迟"><a href="#网络延迟" class="headerlink" title="网络延迟"></a>网络延迟</h3><p>网络连接可以通过带宽（比特）和延迟（毫秒）来测量，网络延迟耽误的时间会被加到链接的请求时间内。</p>
<h3 id="缓存能力差"><a href="#缓存能力差" class="headerlink" title="缓存能力差"></a>缓存能力差</h3><p>要确保浏览器最终不会重复获取已有的资源。</p>
<h2 id="用YSlow和PageSpeed提升速度"><a href="#用YSlow和PageSpeed提升速度" class="headerlink" title="用YSlow和PageSpeed提升速度"></a>用YSlow和PageSpeed提升速度</h2><h3 id="YSlow"><a href="#YSlow" class="headerlink" title="YSlow"></a>YSlow</h3><p>内容分发网络（CDN）是一种服务，让你能够从”周边的服务器”上获取某些（通常静态的）内容：服务器分布在很多地方，最好的情况是可以就近地服务最终用户。这种服务通常用于图像、JS和CSS文件，因为它们不太可能会动态变化。</p>
<h3 id="PageSpeed"><a href="#PageSpeed" class="headerlink" title="PageSpeed"></a>PageSpeed</h3><p>没有看懂为什么设置了报头的过期时间就可以解决不把同一个代理上网的桌面用户定义到移动网站。。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>把样式内联，把JS置于底部，并优化图像（媒体查询，不同设备下载不同图像）。</p>
<h1 id="加快下一次访问的速度"><a href="#加快下一次访问的速度" class="headerlink" title="加快下一次访问的速度"></a>加快下一次访问的速度</h1><p>缓存是你第一次访问之后存储数据，它可以让你在下一次访问时跟更迅速。在移动端，与其他终端一样，要尽最大的可能利用缓存。在触摸设备上使用缓存的主要工具是常规的浏览器缓存、本地存储（localStorage）和应用缓存（application cache）。</p>
<h2 id="在HTTP中缓存"><a href="#在HTTP中缓存" class="headerlink" title="在HTTP中缓存"></a>在HTTP中缓存</h2><p>控制HTTP缓存的方式有三种：</p>
<ol>
<li>新鲜度</li>
<li>验证</li>
<li>失效</li>
</ol>
<h3 id="新鲜度"><a href="#新鲜度" class="headerlink" title="新鲜度"></a>新鲜度</h3><p>也成为TTL（生存时间）。是最简单的方式，使用报头，缓存代理会被告知在保持状态和重新获取新内容之前，需要缓存保留该资源多长时间。最简单的处理方法是使用Expires报头。这样做的目的是那些所谓的静态资源（eg:CSS JS），如果可以的话，不用再次获取。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>浏览器可以发出一个包含If-Modified-Since报头的请求，如果服务器上的文件没有发生改变，服务器就会发送一个304 Not Modified的响应，这样浏览器就会使用缓存中已有的文件，而不是从服务器重新获取。  另一个验证功能是ETag.ETag是一种唯一标识符，一般通过哈希算出。它只需要比较一段间断的字符，就能在没有日期信息的情况下验证缓存是否与服务器上的文件相同。请求代理会创建一个有附加条件的请求，并加入If-None-Match报头，它包含了ETag。如果服务器上当前内容能匹配用户的ETag,则服务器会再次返回一个304响应。  验证缓存需要在客户端和服务器之间进行一次往返，虽然比重新下载一个文件好，但是设置较长的过期时间，可以避免浏览器尝试去验证它。</p>
<h3 id="失效"><a href="#失效" class="headerlink" title="失效"></a>失效</h3><p>创建指向相同URL的非GET请求会使缓存失效。</p>
<h3 id="正常的缓存行为"><a href="#正常的缓存行为" class="headerlink" title="正常的缓存行为"></a>正常的缓存行为</h3><p>如果没有改写报头，也没有做其他事，浏览器有正常的缓存行为。大多数浏览器有一个最大缓存大小，当缓存到达这个大小时，就会从缓存中删除最近最少使用的项目。因此，长时间没有被使用的缓存项将被清除，清除哪些缓存完全是基于用户行为的。</p>
<h2 id="网络存储"><a href="#网络存储" class="headerlink" title="网络存储"></a>网络存储</h2><p>网络存储通过localStorage和sessionStorage这两个全局变量来访问。sessionStorage是一种非持久性的存储，会在浏览会话之间被清除掉。它也不能在多个标签页之间共享，因此更适合于存储临时的应用程序数据，而不是被当作缓存使用。除了这一点，localStorage和sessionStorage的其他方面都是相同的。  与cookie一样，网络存储访问有同源策略（某个网页只能访问来自同一域，即”域”、”端口”和”协议”都相同的网络存储设定的值）的限制。如果用户重置浏览器，那么所有的数据都会丢失。  localStorage应该被视为不安全的。和任何（不安全）数据一样，用户可以读取和修改localStorage中的一切内容。</p>
<h3 id="将网络存储作为缓存层来使用"><a href="#将网络存储作为缓存层来使用" class="headerlink" title="将网络存储作为缓存层来使用"></a>将网络存储作为缓存层来使用</h3><p>将网络存储作为缓存层来使用时，可以通过下面公式计算当前剩余空间：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//localStorage的默认存储大小为5M</span></div><div class="line">  <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span> - <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(localStorage))).length</div></pre></td></tr></table></figure>
<h2 id="应用存储"><a href="#应用存储" class="headerlink" title="应用存储"></a>应用存储</h2><p>应用缓存存储是为了web程序没有联网时也能继续使用。使用应用缓存，即使缓存已经到期，文件也不会被立即更新，而是要到用户下一次访问时文件才会被更新。可以用JS API来检查旧缓存。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appCache = <span class="built_in">window</span>.applicationCache;</div><div class="line">appCache.update();</div></pre></td></tr></table></figure>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>应用缓存可能会带来很多问题，并不建议使用。</p>
]]></content>
    
    <summary type="html">
    
      《HTML5触摸界面设计与开发》读书笔记
    
    </summary>
    
      <category term="读书笔记" scheme="http://lijingjing.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习" scheme="http://lijingjing.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>利用Angular Directive实现树形结构</title>
    <link href="http://lijingjing.top/blog/2016/09/21/Angular-Directive/"/>
    <id>http://lijingjing.top/blog/2016/09/21/Angular-Directive/</id>
    <published>2016-09-21T05:16:47.000Z</published>
    <updated>2016-11-29T08:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p> 在做Cadillac的项目时，由于网页端开发要参照媒设老师给的设计图，具体如下： <img src="/images/Cadillac_config.png" alt="Cadillac_config">  我也不清楚是否有现成的插件可以用，感觉应该要自己实现，而且由于自己一直很排斥angular中的指令，觉着好难，为了拯救我自己，所以就逼着自己去学习directive并运用到现有的开发项目中。</p>
<p> 其实我的实现代码本身还是很混乱的，因为点击编辑经常出现没有反应的现象，这个bug好像有时候可以复现，有时候不能复现，而且我一直想总结directive方面的东西，但因为拖延症没有总结。总之，由于bug的飘忽性，我终于决定写一篇关于directive的博客，希望梳理思路的过程中可以找到代码的漏洞，同时整理一下我自己都不想多看的代码。</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h2><p> 我本来想车系、配置和颜色各占一栏，这样均分三份就好了。但是由于配置由车系决定，颜色又由配置决定，这种从属关系太复杂，我发现如果我让他们各自独立成三块，不能方便的进行通信，因为每个directive有自己独立的scope，如果兄弟节点之间想要通信，必须借助于父亲，先把消息$emit给父亲，再通过父亲$broadcast给所有的孩子，特定的孩子再进行消息处理。这样我觉着逻辑太复杂，所以就设计了下面的指令形式。</p>
<p> 所有代码如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">container</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configinfo</span> <span class="attr">ng-repeat</span>=<span class="string">"carline in lines"</span>&gt;</span>      </div><div class="line">            <span class="tag">&lt;<span class="name">carline</span> <span class="attr">class</span>=<span class="string">"carline"</span> <span class="attr">line-name</span>=<span class="string">"carline.name"</span> <span class="attr">line-id</span>=<span class="string">"carline.id"</span> <span class="attr">edit</span>=<span class="string">"edit"</span></span></div><div class="line">                     <span class="attr">line-checked</span>=<span class="string">"carline.flag"</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">carline</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-xs-12"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"showConfigs"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">configs</span> <span class="attr">ng-repeat</span>=<span class="string">"config in configs"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">config</span> <span class="attr">class</span>=<span class="string">"config width-p50"</span> <span class="attr">config-name</span>=<span class="string">"config.name"</span></span></div><div class="line">                                <span class="attr">config-id</span>=<span class="string">"config.id"</span> <span class="attr">carline-id</span>=<span class="string">"carline.id"</span></div><div class="line">                                <span class="attr">config-checked</span>=<span class="string">"config.flag"</span>&gt;</div><div class="line">                        <span class="tag">&lt;/<span class="name">config</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"width-p50"</span> <span class="attr">ng-show</span>=<span class="string">"showColors"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"color in colors"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">color</span> <span class="attr">class</span>=<span class="string">"color"</span> <span class="attr">config-id</span>=<span class="string">"config.id"</span> <span class="attr">color-name</span>=<span class="string">"color.name"</span></span></div><div class="line">                                       <span class="attr">color-id</span>=<span class="string">"color.id"</span> <span class="attr">color-checked</span>=<span class="string">"color.flag"</span>&gt;</div><div class="line">                                <span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">configs</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 为了对齐操作那一栏 --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configinfo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">container</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JS文件"><a href="#JS文件" class="headerlink" title="JS文件"></a>JS文件</h2><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p> 其中，container是整个控件的容器，是下面所有指令的父亲，一些页面的控制可以写在container的控制器里；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//directives</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">containerFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div ng-transclude&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> carlines = [];<span class="comment">//这里获取所有车系的scope，以方便之后判断哪个车系要展开</span></div><div class="line">            <span class="keyword">var</span> colors = [];</div><div class="line">            <span class="keyword">var</span> configs = [];</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.gotConfigOpened = <span class="function"><span class="keyword">function</span> (<span class="params">selectedCarline</span>) </span>&#123;</div><div class="line">              <span class="comment">//刚开始没有选中的车系时，哪个配置都不展开</span></div><div class="line">                <span class="keyword">if</span> (selectedCarline == <span class="literal">undefined</span>) &#123;</div><div class="line">                    angular.forEach(carlines, <span class="function"><span class="keyword">function</span> (<span class="params">carline</span>) </span>&#123;</div><div class="line">                      <span class="comment">//让所有的配置项的icon都为加号</span></div><div class="line">                        carline.$broadcast(<span class="string">'showConfig'</span>, <span class="literal">false</span>);</div><div class="line">                        <span class="comment">//将所有配置项都收起</span></div><div class="line">                        carline.showConfigs = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//根据点击获取车系的id,令当前车系下的配置展开</span></div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    angular.forEach(carlines, <span class="function"><span class="keyword">function</span> (<span class="params">carline</span>) </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (selectedCarline.lineid != carline.carline.id) &#123;</div><div class="line">                          <span class="comment">//让所有的配置项的icon都为加号</span></div><div class="line">                            carline.$broadcast(<span class="string">'showConfig'</span>, <span class="literal">false</span>);</div><div class="line">                            <span class="comment">//将所有配置项都收起</span></div><div class="line">                            carline.showConfigs = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                          <span class="comment">//根据当前点击icon的状态来判断配置是否为收起状态</span></div><div class="line">                            carline.showConfigs = selectedCarline.showConfig;</div><div class="line">                            carline.$emit(<span class="string">'configs'</span>, selectedCarline.lineid);</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">this</span>.gotColorOpened = <span class="function"><span class="keyword">function</span> (<span class="params">selectedConfig</span>) </span>&#123;</div><div class="line">               angular.forEach(configs, <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">                   <span class="keyword">if</span> (selectedConfig.configid != config.config.id) &#123;</div><div class="line">                       config.$broadcast(<span class="string">'showColor'</span>, <span class="literal">false</span>);</div><div class="line">                       config.showColors = <span class="literal">false</span>;</div><div class="line">                       config.$emit(<span class="string">'showColors'</span>, <span class="literal">false</span>);</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">else</span> &#123;</div><div class="line">                       config.showColors = selectedConfig.showColor;</div><div class="line">                       config.$emit(<span class="string">'showColors'</span>, selectedConfig.showColor);</div><div class="line">                       config.$emit(<span class="string">'colors'</span>, selectedConfig.configid);</div><div class="line"></div><div class="line">                   &#125;</div><div class="line">               &#125;);</div><div class="line">           &#125;;</div><div class="line"></div><div class="line">                <span class="comment">//车系下的配置展开，所有的颜色信息收起</span></div><div class="line">                $scope.colors = [];</div><div class="line">                $scope.$broadcast(<span class="string">'showColor'</span>, <span class="literal">false</span>);</div><div class="line">                $scope.showColors = <span class="literal">false</span>;</div><div class="line">                $scope.$emit(<span class="string">'showColors'</span>, <span class="literal">false</span>);</div><div class="line"></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.addCarLine = <span class="function"><span class="keyword">function</span> (<span class="params">carline</span>) </span>&#123;</div><div class="line">                carlines.push(carline);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.addConfig = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">               configs.push(config);</div><div class="line">           &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.addColor = <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</div><div class="line">                colors.push(color);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="configinfo"><a href="#configinfo" class="headerlink" title="configinfo"></a>configinfo</h3><p> configinfo用来拿到车系信息，作为下层指令的父亲，所有的孩子都可以获取车系的相关信息；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configinfoFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?container'</span>,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div class="row configinfo" ng-transclude&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, containerController</span>) </span>&#123;</div><div class="line">          <span class="comment">//将当前车系的scope加入到父亲控制器的变量中，为之后配置的展开与收起做准备</span></div><div class="line">            containerController.addCarLine(scope);</div><div class="line">            scope.$on(<span class="string">'showColors'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">                scope.showColors = data;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="carline"><a href="#carline" class="headerlink" title="carline"></a>carline</h3><p> carline为具体的车系指令，显示车系，并在编辑状态下，显示前面的复选框，这样来让操作人员控制哪些车系现在可以放到系统里进行售卖；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">carlineFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?container'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;<span class="comment">//传递信息给当前作用域</span></div><div class="line">            linename: <span class="string">'=lineName'</span>,</div><div class="line">            <span class="attr">lineid</span>: <span class="string">'=lineId'</span>,</div><div class="line">            <span class="attr">carlineChecked</span>: <span class="string">'=lineChecked'</span>,</div><div class="line">            <span class="attr">edit</span>: <span class="string">'=edit'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div class="col-md-3 col-xs-6"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="checkbox" ng-show="edit"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;label class="custom-checkbox"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;input type="checkbox"  ng-model="carlineChecked" ng-change="lineChange(carlineChecked,lineid)"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;span&gt;&#123;&#123;linename&#125;&#125;&lt;/span&gt;&lt;/label&gt; &lt;/div&gt;&lt;span ng-show="!edit"&gt;&#123;&#123;linename&#125;&#125;&lt;/span&gt;'</span> +</div><div class="line">        <span class="string">'&lt;i class="ion-ios-plus-outline addIcon config-icon" ng-show="(!showConfig)&amp;&amp;edit" ng-transclude ng-click="toggle()"&gt;&lt;/i&gt;'</span> +</div><div class="line">        <span class="string">'&lt;i class="ion-chevron-left addIcon config-icon" ng-show="showConfig&amp;&amp;edit" ng-transclude ng-click="toggle()"&gt;&lt;/i&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, containerController</span>) </span>&#123;</div><div class="line">          <span class="comment">//标志位，用来判断，当前后面的信息是否展开</span></div><div class="line">          <span class="comment">//如果为true，说明后面的配置项已经展开，图标为小于号</span></div><div class="line">          <span class="comment">//如果为false，说明后面的配置项收起，图标为加号</span></div><div class="line">            scope.showConfig = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            scope.$on(<span class="string">'edit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">                scope.edit = data;</div><div class="line">                scope.showConfig = <span class="literal">false</span>;</div><div class="line">                <span class="comment">//点击编辑，强制将所有项都收起，恢复初始状态</span></div><div class="line">                containerController.gotConfigOpened(<span class="literal">undefined</span>);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">//获取当前是否被勾选，然后发送消息给父亲scope，进行之后的信息保存</span></div><div class="line">            scope.lineChange = <span class="function"><span class="keyword">function</span> (<span class="params">carlineChecked, lineId</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: lineId, <span class="attr">flag</span>: carlineChecked&#125;;</div><div class="line">                scope.$emit(<span class="string">'lineChange'</span>, data);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="comment">//接收showConfig消息</span></div><div class="line">            scope.$on(<span class="string">'showConfig'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">                scope.showConfig = data;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            scope.toggle = <span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                scope.showConfig = !scope.showConfig;</div><div class="line">                containerController.gotConfigOpened(scope);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="configs"><a href="#configs" class="headerlink" title="configs"></a>configs</h3><p> configs用来获取所有的配置信息，并将所有配置的scope存放到container中，即最外层指令中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configsFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?container'</span>,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div class="row configinfo" ng-transclude&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, containerController</span>) </span>&#123;</div><div class="line">            containerController.addConfig(scope);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p> config为具体某个配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?container'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">configname</span>: <span class="string">'=configName'</span>,</div><div class="line">            <span class="attr">configid</span>: <span class="string">'=configId'</span>,</div><div class="line">            <span class="attr">carlineid</span>: <span class="string">'=carlineId'</span>,</div><div class="line">            <span class="attr">configChecked</span>: <span class="string">'=configChecked'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div class="config"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="checkbox"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;label class="custom-checkbox"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;input type="checkbox"  ng-model="configChecked" ng-change="configChange(configChecked,configid)"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;span&gt;&#123;&#123;configname&#125;&#125;&lt;/span&gt;&lt;/label&gt; &lt;/div&gt;'</span> +</div><div class="line">        <span class="string">'&lt;i class="ion-ios-plus-outline config-icon" ng-show="!showColor" ng-transclude ng-click="toggle()"&gt;&lt;/i&gt;'</span> +</div><div class="line">        <span class="string">'&lt;i class="ion-chevron-left config-icon" ng-show="showColor" ng-transclude ng-click="toggle()"&gt;&lt;/i&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, containerController</span>) </span>&#123;</div><div class="line">            scope.showColor = <span class="literal">false</span>;</div><div class="line">            scope.$on(<span class="string">'showColor'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">                scope.showColor = data;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            scope.toggle = <span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                scope.showColor = !scope.showColor;</div><div class="line">                containerController.gotColorOpened(scope);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            scope.configChange = <span class="function"><span class="keyword">function</span> (<span class="params">configChecked, configId</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: configId, <span class="attr">flag</span>: configChecked&#125;;</div><div class="line">                scope.$emit(<span class="string">'configChange'</span>, data);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p> color为某个具体车系下的所有颜色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">require</span>: <span class="string">'^?container'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">colorname</span>: <span class="string">'=colorName'</span>,</div><div class="line">            <span class="attr">colorid</span>: <span class="string">'=colorId'</span>,</div><div class="line">            <span class="attr">configid</span>: <span class="string">'=configId'</span>,</div><div class="line">            <span class="attr">colorChecked</span>: <span class="string">'=colorChecked'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;div class="color"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;div class="checkbox"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;label class="custom-checkbox"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;input type="checkbox" id="checkboxWarning" ng-model="colorChecked" ng-change="colorChange(colorid,colorChecked)"&gt;'</span> +</div><div class="line">        <span class="string">'&lt;span&gt;&#123;&#123;colorname&#125;&#125;&lt;/span&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/label&gt; &lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs, containerController</span>) </span>&#123;</div><div class="line">            containerController.addColor(scope);</div><div class="line">            scope.colorChange = <span class="function"><span class="keyword">function</span> (<span class="params">id, flag</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: id, <span class="attr">flag</span>: flag&#125;;</div><div class="line">                scope.$emit(<span class="string">'colorChange'</span>, data);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><p> 如果每次展开和收起都要重新去服务器拉取数据，这样是网络延迟比较高的情况下，用户体验是很差的，所以，可以把第一次获取的数据缓存到当前页面中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ctrl</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConfigInfoCtrl</span>(<span class="params">$scope, $filter, ConfigInfoService, $state, $stateParams</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> submitLines = [];</div><div class="line">    <span class="keyword">var</span> submitConfigs = [];</div><div class="line">    <span class="keyword">var</span> submitColors = [];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> tempConfigs = [];</div><div class="line">    <span class="keyword">var</span> tempColors = [];</div><div class="line"></div><div class="line"></div><div class="line">    $scope.$on(<span class="string">'configs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, lineId</span>) </span>&#123;</div><div class="line">        $scope.configs = [];</div><div class="line">        <span class="keyword">if</span> (tempConfigs[lineId] == <span class="literal">null</span> || tempConfigs[lineId] == <span class="literal">undefined</span>) &#123;</div><div class="line"></div><div class="line">            ConfigInfoService.getConfigs(lineId).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                $scope.configs = data.data;</div><div class="line">                tempConfigs[lineId] = data.data;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            $scope.configs = tempConfigs[lineId];</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $scope.$on(<span class="string">'colors'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, configId</span>) </span>&#123;</div><div class="line">        $scope.colors = [];</div><div class="line">        <span class="keyword">if</span> (tempColors[configId] == <span class="literal">null</span> || tempColors[configId] == <span class="literal">undefined</span>) &#123;</div><div class="line">            ConfigInfoService.getColors(configId).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                $scope.colors = data.data;</div><div class="line">                tempColors[configId] = data.data;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            $scope.colors = tempColors[configId];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ConfigInfoService.getLines().success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        $scope.lines = data.data;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $scope.$on(<span class="string">'lineChange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">        submitLines.push(data);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $scope.$on(<span class="string">'configChange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">        submitConfigs.push(data);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $scope.$on(<span class="string">'colorChange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, data</span>) </span>&#123;</div><div class="line">        submitColors.push(data);</div><div class="line">    &#125;);</div><div class="line">    $scope.edit = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    $scope.startEdit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        $scope.edit = <span class="literal">true</span>;</div><div class="line">        $scope.$broadcast(<span class="string">'edit'</span>, <span class="literal">true</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $scope.cancelEdit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        submitLines = [];</div><div class="line">        submitConfigs = [];</div><div class="line">        submitColors = [];</div><div class="line"></div><div class="line">        tempConfigs = [];</div><div class="line"></div><div class="line">        tempColors = [];</div><div class="line">        $scope.edit = <span class="literal">false</span>;</div><div class="line">        $scope.$broadcast(<span class="string">'edit'</span>, <span class="literal">false</span>);</div><div class="line">        $scope.$broadcast(<span class="string">'showColor'</span>, <span class="literal">false</span>);</div><div class="line">        $scope.$broadcast(<span class="string">'showConfig'</span>, <span class="literal">false</span>);</div><div class="line">        ConfigInfoService.getLines().success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            $scope.lines = data.data;</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $scope.updateConfig = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> params = &#123;<span class="attr">line</span>: submitLines, <span class="attr">configuration</span>: submitConfigs, <span class="attr">color</span>: submitColors&#125;;</div><div class="line"></div><div class="line">        ConfigInfoService.updateConfigs(<span class="built_in">JSON</span>.stringify(params)).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            $scope.edit = <span class="literal">false</span>;</div><div class="line">            $scope.$broadcast(<span class="string">'edit'</span>, <span class="literal">false</span>);</div><div class="line">            alert(<span class="string">"提交成功!"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h1><p><img src="/images/Cadillac1.jpeg" alt="Cadillac_config"><br><img src="/images/Cadillac2.jpeg" alt="Cadillac_config"><br><img src="/images/Cadillac3.jpeg" alt="Cadillac_config">   </p>
]]></content>
    
    <summary type="html">
    
      AngularJS Directive实践
    
    </summary>
    
      <category term="AngularJS" scheme="http://lijingjing.top/categories/AngularJS/"/>
    
    
      <category term="Directive" scheme="http://lijingjing.top/tags/Directive/"/>
    
  </entry>
  
  <entry>
    <title>失焦防止alert两次</title>
    <link href="http://lijingjing.top/blog/2016/09/21/%E5%A4%B1%E7%84%A6%E9%98%B2%E6%AD%A2alert%E4%B8%A4%E6%AC%A1/"/>
    <id>http://lijingjing.top/blog/2016/09/21/失焦防止alert两次/</id>
    <published>2016-09-21T02:43:13.000Z</published>
    <updated>2016-11-14T14:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p> 其实感觉是个很简单的功能，就是input失焦后，给用户一个提醒，比如：一旦填写不能修改此类。  然后第一直觉就是写个失焦函数，alert就好了嘛。  但是，它alert没完没了了，一次不够，竟然alert了两次。我也是无语。  感觉逻辑上根本讲不通。明明我只写了一个alert，也只是失焦了一次，为什么会出现两个alert。</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p> 后来我才发现，原来onblur失焦，不仅在当前元素上触发，也在window对象上触发。所以要判断当前是谁失焦，是window还是你指定的元素。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> isTargetWindow = <span class="literal">false</span>;</div><div class="line">$(<span class="built_in">window</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e.target);</div><div class="line">    isTargetWindow = <span class="literal">true</span>;</div><div class="line">&#125;);</div><div class="line">$(<span class="built_in">window</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    isTargetWindow = <span class="literal">false</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertInfo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!isTargetWindow)</div><div class="line">        &#123;</div><div class="line">            alert(<span class="string">"提示信息！"</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 其实涉及的应该是JS里的事件冒泡，但我还是不明白，项目里为什么onblur在input元素上，window也会触发input里的onblur函数。</p>
<p> 最最最最最奇葩的是，这个bug我现在复现不了了。。。 复现不了bug我也是很生气。。</p>
]]></content>
    
    <summary type="html">
    
      防止失焦后页面alert两次
    
    </summary>
    
      <category term="前端" scheme="http://lijingjing.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="onblur" scheme="http://lijingjing.top/tags/onblur/"/>
    
      <category term="alert" scheme="http://lijingjing.top/tags/alert/"/>
    
  </entry>
  
  <entry>
    <title>文件下载（兼容IE8）</title>
    <link href="http://lijingjing.top/blog/2016/07/22/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%EF%BC%88%E5%85%BC%E5%AE%B9IE8%EF%BC%89/"/>
    <id>http://lijingjing.top/blog/2016/07/22/文件下载（兼容IE8）/</id>
    <published>2016-07-22T14:23:09.000Z</published>
    <updated>2016-07-22T14:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的愿望"><a href="#我的愿望" class="headerlink" title="我的愿望"></a>我的愿望</h1><p>&nbsp;我的愿望是，以后不要再遇到让我兼容IE8的项目了好吗！我真的是要分分钟爆炸啊，是的，我现在整个人就是一座活火山，随时随刻可以喷射火焰。从今天下午三点到现在，我一直在搞文件下载，虽然中间和aki一直在聊人生，聊理想，聊未来。聊着聊着感觉未来一片黑暗啊，人生真艰难，活着真不容易= =。。都没心情谈情怀了。<br>&nbsp;现在所有的工作的难点都在兼容性问题上，但是我真的不想去搞啊。意义在哪里。。。为何IE8还活在这个世上，宝宝不开心，宝宝生气了，宝宝真的不想搞IE8啊，我觉着迟早有一天我会被IE8搞死吧！好了，这篇文章的基调，就是吐槽。没办法，因为李菁菁在爆炸。</p>
<h1 id="如果世上没有IE8"><a href="#如果世上没有IE8" class="headerlink" title="如果世上没有IE8"></a>如果世上没有IE8</h1><p>&nbsp;如果世上没有IE8，那世界将是美好人间吧。原谅我直接把项目中的代码贴上来了，因为已经很晚了，我现在不想去抽离函数了。我很懒，但是我有时候又很强迫症。。。So sad。下面的函数，对于IE&gt;9的版本来说，是OK的，其他浏览器也可以。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//附件下载</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">downloadAttachment</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">var</span> rows = ReceivedFileGrid.getSelecteds();</div><div class="line">       <span class="keyword">if</span> (rows.length &gt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (confirm(<span class="string">"确定选中进行附件文件打包？"</span>)) &#123;</div><div class="line">               <span class="keyword">var</span> ids = [];</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = rows.length; i &lt; l; i++) &#123;</div><div class="line">                   <span class="keyword">var</span> r = rows[i];</div><div class="line">                   ids.push(&#123;<span class="attr">id</span>: r.id&#125;);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(ids);</div><div class="line">           <span class="keyword">var</span> url = ip + <span class="string">'/multipleDownloadReceiveFiles'</span>;</div><div class="line">           <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">           xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</div><div class="line">           xhr.responseType = <span class="string">'arraybuffer'</span>;</div><div class="line">           xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</div><div class="line">                   <span class="keyword">var</span> filename = <span class="string">"附件下载.zip"</span>;</div><div class="line">                   <span class="keyword">var</span> disposition = xhr.getResponseHeader(<span class="string">'Content-Disposition'</span>);</div><div class="line">                   <span class="keyword">if</span> (disposition &amp;&amp; disposition.indexOf(<span class="string">'attachment'</span>) !== <span class="number">-1</span>) &#123;</div><div class="line">                       <span class="keyword">var</span> filenameRegex = <span class="regexp">/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/</span>;</div><div class="line">                       <span class="keyword">var</span> matches = filenameRegex.exec(disposition);</div><div class="line">                       <span class="keyword">if</span> (matches != <span class="literal">null</span> &amp;&amp; matches[<span class="number">1</span>]) filename = matches[<span class="number">1</span>].replace(<span class="regexp">/['"]/g</span>, <span class="string">''</span>);</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">var</span> type = xhr.getResponseHeader(<span class="string">'Content-Type'</span>);</div><div class="line"></div><div class="line">                   <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="keyword">this</span>.response], &#123;<span class="attr">type</span>: type&#125;);</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.navigator.msSaveBlob !== <span class="string">'undefined'</span>) &#123;</div><div class="line">                       <span class="comment">// IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."</span></div><div class="line">                       <span class="built_in">window</span>.navigator.msSaveBlob(blob, filename);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">var</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</div><div class="line">                       <span class="keyword">var</span> downloadUrl = URL.createObjectURL(blob);</div><div class="line"></div><div class="line">                       <span class="keyword">if</span> (filename) &#123;</div><div class="line">                           <span class="comment">// use HTML5 a[download] attribute to specify filename</span></div><div class="line">                           <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">                           <span class="comment">// safari doesn't support this yet</span></div><div class="line">                           <span class="keyword">if</span> (<span class="keyword">typeof</span> a.download === <span class="string">'undefined'</span>) &#123;</div><div class="line">                               <span class="built_in">window</span>.location = downloadUrl;</div><div class="line">                           &#125; <span class="keyword">else</span> &#123;</div><div class="line">                               a.href = downloadUrl;</div><div class="line">                               a.download = filename;</div><div class="line">                               <span class="built_in">document</span>.body.appendChild(a);</div><div class="line">                               a.click();</div><div class="line">                           &#125;</div><div class="line">                       &#125; <span class="keyword">else</span> &#123;</div><div class="line">                           <span class="built_in">window</span>.location = downloadUrl;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                           URL.revokeObjectURL(downloadUrl);</div><div class="line">                       &#125;, <span class="number">100</span>); <span class="comment">// cleanup</span></div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   alert(<span class="string">"您所选择的收文文件没有上传附件！！！"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;;</div><div class="line">           xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/json;charset=utf-8'</span>);</div><div class="line">           xhr.send(json);</div><div class="line"></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           alert(<span class="string">"请选中一条记录"</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="也是走过弯路的"><a href="#也是走过弯路的" class="headerlink" title="也是走过弯路的"></a>也是走过弯路的</h1><p>&nbsp;由于脑子不清楚，我以为SaveAs可以拯救我。但是，妹子啊，这个是另存为啊好不好！脑子瓦特了吗。在纠结了半天为什么文件类型只能保存为txt和html后，终于反应过来了，被自己蠢哭了。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaveContents</span>(<span class="params">data, filename</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.execCommand) &#123;</div><div class="line">            <span class="keyword">var</span> oWin = <span class="built_in">window</span>.open(<span class="string">"about:blank"</span>, <span class="string">"_blank"</span>);</div><div class="line">            <span class="comment">//To add a new line, you need to use &lt;br&gt;</span></div><div class="line">            oWin.document.open(<span class="string">"application/octet-stream"</span>, <span class="string">"replace"</span>);</div><div class="line">            oWin.document.charset = <span class="string">"utf-8"</span>;</div><div class="line">            oWin.document.write(data);</div><div class="line">            oWin.document.close();</div><div class="line"></div><div class="line">            <span class="comment">//Need to specify the filename that we are going to set here</span></div><div class="line">            <span class="keyword">var</span> success = oWin.document.execCommand(<span class="string">'SaveAs'</span>, <span class="literal">true</span>, filename);</div><div class="line">            oWin.close();</div><div class="line">            alert(success);</div><div class="line">            <span class="keyword">if</span> (!success) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="就算是IE8，也没什么了不起"><a href="#就算是IE8，也没什么了不起" class="headerlink" title="就算是IE8，也没什么了不起"></a>就算是IE8，也没什么了不起</h1><p>&nbsp;首先，我们来看看，IE的版本吧。哎。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    IE8测试</span></div><div class="line">           <span class="keyword">var</span> Sys = &#123;&#125;;</div><div class="line">           <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line">           <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)</div><div class="line">               Sys.ie = ua.match(<span class="regexp">/msie ([\d.]+)/</span>)[<span class="number">1</span>];</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (<span class="built_in">parseFloat</span>(Sys.ie) &lt;= <span class="number">9.0</span>) &#123;</div><div class="line">           ajax_download(url, ids, <span class="string">'ids'</span>);</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>&nbsp;然后，利用iframe来解决下载保存问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// creates iframe and form in it with hidden field,</span></div><div class="line"><span class="comment">// then submit form with provided data</span></div><div class="line"><span class="comment">// url - form url</span></div><div class="line"><span class="comment">// data - data to form field</span></div><div class="line"><span class="comment">// input_name - form hidden input name</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax_download</span>(<span class="params">url, data, input_name</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $iframe,</div><div class="line">                iframe_doc,</div><div class="line">                iframe_html;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (($iframe = $(<span class="string">'#download_iframe'</span>)).length === <span class="number">0</span>) &#123;</div><div class="line">            $iframe = $(<span class="string">"&lt;iframe id='download_iframe'"</span> +</div><div class="line">                    <span class="string">" style='display: none' src='about:blank'&gt;&lt;/iframe&gt;"</span></div><div class="line">            ).appendTo(<span class="string">"body"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        iframe_doc = $iframe[<span class="number">0</span>].contentWindow || $iframe[<span class="number">0</span>].contentDocument;</div><div class="line">        <span class="keyword">if</span> (iframe_doc.document) &#123;</div><div class="line">            iframe_doc = iframe_doc.document;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        iframe_html = <span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form id='myForm' method='POST' action='"</span> +</div><div class="line">                url + <span class="string">"'&gt;"</span> +</div><div class="line">                <span class="string">"&lt;input type=hidden name='"</span> + input_name + <span class="string">"' value='"</span> +</div><div class="line">                <span class="built_in">JSON</span>.stringify(data) + <span class="string">"'/&gt;&lt;/form&gt;"</span> +</div><div class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;</div><div class="line"></div><div class="line">        iframe_doc.open();</div><div class="line">        iframe_doc.write(iframe_html);</div><div class="line">        $(iframe_doc).find(<span class="string">'form'</span>).submit();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="Spring也很坑啊"><a href="#Spring也很坑啊" class="headerlink" title="Spring也很坑啊"></a>Spring也很坑啊</h1><p>&nbsp;写好前台代码后，想测试下载功能，由于现在前台传过去的数据格式和之前不一样，原来<strong>content-type: application/json</strong>,现在由于是表单提交，所以<strong>content-type: application/x-www-form-urlencoded</strong>,没想到Spring对于content-type是application/x-www-form-urlencoded的表单数据处理，只能说不常见吧，我google了一晚上都没有取到前台传过去的表单数据，只能说我后台真的很渣。还好，我去烦佳薇了，在我的push下，我们终于把下载文件搞定了。作为组长真的很辛苦啊，幸好我不是组长，看着小明和佳薇都这么苦逼，我就庆幸自己不是组长。但是，每个项目前端的压力都在我身上，好害怕。前端的坑很多的。哎。人生啊人生。<br>&nbsp;其实佳薇后台的文件下载也可以写个blog的，但是我不是很清楚具体实现，之后可以学习一下，总结到这篇文章里。<br>&nbsp;下面是佳薇后台接口的实现。我也是很懒，只贴一下代码。<br>&nbsp;@ModelAttribute(“ids”)原来这样就可以拿到传过来的form表单中的值啊，好心酸。我还一直在纠结为什么MutiValueMap取不到，stackoverflow上的人都是在骗我吗，为什么我取不到，奇葩问题，可以之后找个Spring大神问一下。。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/multipleDownloadReceiveFiles"</span>, method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multipleDownloadReceiveFiles</span><span class="params">(@ModelAttribute(<span class="string">"ids"</span>)</span> String receiveFileIdsStr,</span></div><div class="line">                                               HttpServletResponse response)&#123;</div><div class="line">        File result = <span class="keyword">null</span>;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        List&lt;Map&lt;String, Integer&gt;&gt; receiveFileIds = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Integer&gt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            receiveFileIds = mapper.readValue(receiveFileIdsStr, receiveFileIds.getClass());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (receiveFileIds == <span class="keyword">null</span> || receiveFileIds.isEmpty()) &#123;</div><div class="line">            response.setStatus(HttpStatus.NO_CONTENT.value());</div><div class="line">            <span class="keyword">return</span> <span class="string">"没有要下载的内容"</span>;</div><div class="line">        &#125;</div><div class="line">        List&lt;ReceiveFile&gt; receiveFiles = <span class="keyword">new</span> ArrayList&lt;ReceiveFile&gt;();</div><div class="line">        Map&lt;String, List&lt;Attachment&gt;&gt; dcncodes_attachments = <span class="keyword">new</span> HashMap&lt;String, List&lt;Attachment&gt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map&lt;String, Integer&gt; receiveFileId : receiveFileIds) &#123;</div><div class="line">            <span class="keyword">if</span> (receiveFileId != <span class="keyword">null</span> &amp;&amp; receiveFileId.containsKey(<span class="string">"id"</span>)) &#123;</div><div class="line">                ReceiveFile receiveFile = receiveFileDao.findOne(Long.valueOf((<span class="keyword">long</span>)receiveFileId.get(<span class="string">"id"</span>)));</div><div class="line">                <span class="keyword">if</span> (receiveFile != <span class="keyword">null</span>) &#123;</div><div class="line">                    receiveFiles.add(receiveFile);</div><div class="line">                    Project project = receiveFile.project;</div><div class="line">                    EngNoInfo engNoInfo = receiveFile.engNoInfo;</div><div class="line">                    List&lt;Attachment&gt; attachments1 = attachmentDao.findByFileIdAndTypeAndProjectAndEngNoInfoAndAlive(receiveFile.id, <span class="string">"R"</span>, project, engNoInfo, <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span> (attachments1 != <span class="keyword">null</span> &amp;&amp; !attachments1.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">for</span> (Attachment attachment : attachments1) &#123;</div><div class="line">                            <span class="keyword">if</span> (attachment != <span class="keyword">null</span> &amp;&amp; receiveFile.DCNCode != <span class="keyword">null</span>) &#123;</div><div class="line">                                List&lt;Attachment&gt; attachments = dcncodes_attachments.containsKey(receiveFile.DCNCode) ? dcncodes_attachments.get(receiveFile.DCNCode) : <span class="keyword">new</span> ArrayList&lt;Attachment&gt;();</div><div class="line">                                attachments.add(attachment);</div><div class="line">                                dcncodes_attachments.put(receiveFile.DCNCode, attachments);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dcncodes_attachments.isEmpty()) &#123;</div><div class="line">            response.setStatus(HttpStatus.NO_CONTENT.value());</div><div class="line">            <span class="keyword">return</span> <span class="string">"没有要下载的内容"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        result = attachmentService.downloadAttachmentsByReceiveFiles(dcncodes_attachments, receiveFiles);</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            response.setStatus(HttpStatus.NO_CONTENT.value());</div><div class="line">            <span class="keyword">return</span> <span class="string">"下载失败"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String fileDisplay = result.getAbsolutePath();</div><div class="line">            fileDisplay = fileDisplay.substring(fileDisplay.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</div><div class="line">            fileDisplay = URLEncoder.encode(fileDisplay,<span class="string">"UTF-8"</span>);</div><div class="line">            <span class="comment">// get your file as InputStream</span></div><div class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(result);</div><div class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span> + fileDisplay);</div><div class="line">            response.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/octet-stream"</span>);</div><div class="line">            response.setHeader(<span class="string">"Content-Length"</span>, String.valueOf(result.length()));</div><div class="line">            response.setStatus(HttpStatus.OK.value());</div><div class="line">            <span class="comment">// copy it to response's OutputStream</span></div><div class="line">            org.apache.commons.io.IOUtils.copy(is, response.getOutputStream());</div><div class="line">            response.flushBuffer();</div><div class="line">            <span class="keyword">return</span> <span class="string">"下载成功"</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        response.setStatus(HttpStatus.NO_CONTENT.value());</div><div class="line">        <span class="keyword">return</span> <span class="string">"下载异常"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="还是开心点儿吧"><a href="#还是开心点儿吧" class="headerlink" title="还是开心点儿吧"></a>还是开心点儿吧</h1><p>&nbsp;其实这几天过得挺充实的。嗯，就这样。</p>
]]></content>
    
    <summary type="html">
    
      如何在IE8实现文件下载
    
    </summary>
    
      <category term="前端" scheme="http://lijingjing.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="IE8" scheme="http://lijingjing.top/tags/IE8/"/>
    
  </entry>
  
  <entry>
    <title>IE8跨域访问</title>
    <link href="http://lijingjing.top/blog/2016/07/14/IE8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/"/>
    <id>http://lijingjing.top/blog/2016/07/14/IE8跨域访问/</id>
    <published>2016-07-14T10:50:04.000Z</published>
    <updated>2016-07-14T11:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的碎碎念"><a href="#我的碎碎念" class="headerlink" title="我的碎碎念"></a>我的碎碎念</h1><p>&emsp;现在在做外高桥的一个项目。对方一定要在IE8下浏览。其实每次碰到这种需求，我都好想去给他们装系统啊，一定要用IE的话，IE10+好不好！但是，现实就是这么残酷，答案永远是不能！不行！不可以！那好吧，只能来解决IE8下的各种问题了。<br>&emsp;原来IE8是不能用Ajax进行跨域访问的，微软自己实现了XDomainRequest来解决IE8和IE9下的跨域访问问题。<strong>但是请求一定是同步请求。</strong><br>&emsp;其实还有一种解决跨域的方法，github上有开源实现，叫做<a href="https://github.com/MoonScript/jQuery-ajaxTransport-XDomainRequest" target="_blank" rel="external">JQuery-ajaxTransport-XDomainRequest</a>,只支持GET和POST,只支持HTTP和HTTPS，<strong>请求一定是异步的。</strong><br>&emsp;由于业务要求，我一定要同步请求，因为有了项目，才能去获取工程号等巴拉巴拉，总之，异步不行，正好XDR的方法只支持同步，所以自己写GET和POST方法，IE下的跨域问题就解决啦~</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crossDomainGetAjax</span>(<span class="params">url, successCallback</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// IE8 &amp; 9 Cross domain JSON GET request</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">'XDomainRequest'</span> <span class="keyword">in</span> <span class="built_in">window</span> &amp;&amp; <span class="built_in">window</span>.XDomainRequest !== <span class="literal">null</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest(); <span class="comment">// Use Microsoft XDR</span></div><div class="line">        xdr.open(<span class="string">'get'</span>, url);</div><div class="line">        xdr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> dom = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLDOM'</span>),</div><div class="line">                <span class="built_in">JSON</span> = $.parseJSON(xdr.responseText);</div><div class="line"></div><div class="line">            dom.async = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">JSON</span> == <span class="literal">null</span> || <span class="keyword">typeof</span> (<span class="built_in">JSON</span>) == <span class="string">'undefined'</span>) &#123;</div><div class="line">                <span class="built_in">JSON</span> = $.parseJSON(data.firstChild.textContent);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            successCallback(<span class="built_in">JSON</span>); <span class="comment">// internal function</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        xdr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            _result = <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        xdr.send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// IE7 and lower can't do cross domain</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'MSIE'</span>) != <span class="number">-1</span> &amp;&amp;</div><div class="line">        <span class="built_in">parseInt</span>(navigator.userAgent.match(<span class="regexp">/MSIE ([\d.]+)/</span>)[<span class="number">1</span>], <span class="number">10</span>) &lt; <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Do normal jQuery AJAX for everything else</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">url</span>: url,</div><div class="line">            <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">            <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">            <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">// must be set to false</span></div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data, success</span>) </span>&#123;</div><div class="line">                successCallback(data);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crossDomainPostAjax</span>(<span class="params">url, data, successCallback</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// IE8 &amp; 9 Cross domain JSON POST request</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">'XDomainRequest'</span> <span class="keyword">in</span> <span class="built_in">window</span> &amp;&amp; <span class="built_in">window</span>.XDomainRequest !== <span class="literal">null</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest(); <span class="comment">// Use Microsoft XDR</span></div><div class="line">        xdr.open(<span class="string">'POST'</span>, url);</div><div class="line">        xdr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> dom = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLDOM'</span>),</div><div class="line">                <span class="built_in">JSON</span> = $.parseJSON(xdr.responseText);</div><div class="line"></div><div class="line">            dom.async = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">JSON</span> == <span class="literal">null</span> || <span class="keyword">typeof</span> (<span class="built_in">JSON</span>) == <span class="string">'undefined'</span>) &#123;</div><div class="line">                <span class="built_in">JSON</span> = $.parseJSON(data.firstChild.textContent);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            successCallback(<span class="built_in">JSON</span>); <span class="comment">// internal function</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        xdr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            _result = <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        xdr.send(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// IE7 and lower can't do cross domain</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">'MSIE'</span>) != <span class="number">-1</span> &amp;&amp;</div><div class="line">        <span class="built_in">parseInt</span>(navigator.userAgent.match(<span class="regexp">/MSIE ([\d.]+)/</span>)[<span class="number">1</span>], <span class="number">10</span>) &lt; <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Do normal jQuery AJAX for everything else</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">url</span>: url,</div><div class="line">            <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">            <span class="attr">contentType</span>: <span class="string">'application/json'</span>,</div><div class="line">            <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">            <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">// must be set to false</span></div><div class="line">            data: <span class="built_in">JSON</span>.stringify(data),</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, success</span>) </span>&#123;</div><div class="line">                successCallback(data);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      IE8跨域访问
    
    </summary>
    
      <category term="前端" scheme="http://lijingjing.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="IE8" scheme="http://lijingjing.top/tags/IE8/"/>
    
  </entry>
  
  <entry>
    <title>JS继承</title>
    <link href="http://lijingjing.top/blog/2016/05/17/JS%E7%BB%A7%E6%89%BF/"/>
    <id>http://lijingjing.top/blog/2016/05/17/JS继承/</id>
    <published>2016-05-17T02:57:44.000Z</published>
    <updated>2016-05-30T03:55:14.000Z</updated>
    
    <content type="html"><![CDATA[<p> 许多OO语言都支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。由于函数没有签名，在ECMAScript中无法实现接口继承。ECMAScript只支持实现继承，而且其实现继承主要是依靠原型链来实现的。</p>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p> 基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。引用类型是一种数据结构，用于将数据和功能组织在一起。它也经常被称为类，但这种称呼并不妥当。引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。<br>引用类型：</p>
<ol>
<li>Object类型</li>
<li>Array类型</li>
<li>Date类型</li>
<li>RegExp类型</li>
<li>Function类型</li>
<li>基本包装类型（Boolean类型，Number类型，String类型）</li>
<li>单体内置类型（Global对象，Math对象）   </li>
</ol>
<p></p><p>实现原型链有一种基本模式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.subProperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了superType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line"><span class="comment">//函数定义必须在继承之后</span></div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subProperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());</div></pre></td></tr></table></figure>
<p> 上例是通过创建SuperType的实例来实现继承的，实现的本质是重写原型对象。原来存在于SuperType中的属性和方法，现在也存在于SubType.prototype中了,因为现在SubType.prototype是SuperType的一个实例对象，所以会有实例属性property，以及可以访问SuperType的原型方法getSuperValue。<strong>要注意，现在instance.constructor指向的是superType,这是因为原来SubType.prototype中的constructor被重写了。实际上不是SubType的原型的constructor属性被重写了，而是SubType的原型指向了另一个对象–SuperType的原型，而这个原型对象的constructor属性指向的是SuperType。</strong><br>  <img src="/images/inherit.png" alt="原型链"></p>
<h2 id="别忘记默认的原型"><a href="#别忘记默认的原型" class="headerlink" title="别忘记默认的原型"></a>别忘记默认的原型</h2><p> 所有的引用类型默认都继承了Object，这个继承也是通过原型链实现的。所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针指向Object.prototype。这也是所有自定义类型都会继承toString()、valueOf()等默认方法的根本原因。<br><img src="/images/inherit_all.png" alt="完整原型链"></p>
<h2 id="确定原型和实例的关系"><a href="#确定原型和实例的关系" class="headerlink" title="确定原型和实例的关系"></a>确定原型和实例的关系</h2><p> 两种方法来确定原型和实例之间的关系。</p>
<h3 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h3><p>只要用这个操作符来测试实例与原型链中出现过的构造函数，结果就会返回true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SuperType); <span class="comment">//true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SubType); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="isPrototypeOf-方法"><a href="#isPrototypeOf-方法" class="headerlink" title="isPrototypeOf()方法"></a>isPrototypeOf()方法</h3><p>只要是原型链中出现过的原型，都可以是该原型链所派生的实例原型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance)); <span class="comment">//true</span></div><div class="line">alert(SuperType.prototype.isPrototypeOf(instance)); <span class="comment">//true</span></div><div class="line">alert(SubType.prototype.isPrototypeOf(instance)); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="谨慎地定义方法"><a href="#谨慎地定义方法" class="headerlink" title="谨慎地定义方法"></a>谨慎地定义方法</h2><p> 子类型有时候需要重写超类型中的某个方法，或者需要添加超类型中不存在的某个方法。<br><strong>不管怎么样，给原型添加方法的代码一定要方法替换原型的语句之后，即放在继承之后； 通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样就会重写原型链。</strong>  </p>
<h2 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h2><p> 包含引用类型值的原型属性会被所有实例共享，所以应该在构造函数中，而不是在原型对象中定义属性。在通过原型来实现继承时，原型实际上会变成另一个类型的实例，所以，原先的实例属性也就成了现在的原型属性了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//继承了SuperValue</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">'black'</span>);</div><div class="line">alert(instance1.colors); <span class="comment">// 'red,blue,green,black'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.colors); <span class="comment">// 'red,blue,green,black'</span></div></pre></td></tr></table></figure>
<p> 另一个问题是，在创建子类型的实例中，不能向超类型的构造函数中传递参数（不懂什么情况下需要给超类型的构造函数传递参数），实际上应该说没办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。<br>  实际上很少会单独使用原型链。</p>
<h1 id="借用构造函数（constructor-stealing）"><a href="#借用构造函数（constructor-stealing）" class="headerlink" title="借用构造函数（constructor stealing）"></a>借用构造函数（constructor stealing）</h1><p> 借用构造函数的技术，有时候也叫作伪造对象或经典继承。即在子类型构造函数的内部调用超类型构造函数。函数是在特定环境中执行代码的对象，因此可以通过使用apply()和call()方法可以在新创建的对象上执行构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red,black,white"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//继承了SuperType</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"blue"</span>);</div><div class="line">alert(instance1.colors);<span class="comment">//red,black,white,blue</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.colors);<span class="comment">//red,black,white</span></div></pre></td></tr></table></figure>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p> 借用构造函数，可以在子类型构造函数中向超类型构造函数传递参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//继承了SuperType,同时还传递了参数</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>,<span class="string">"LiJingjing"</span>);</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">22</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.name);<span class="comment">//LiJingjing</span></div><div class="line">alert(instance.age);<span class="comment">//22</span></div></pre></td></tr></table></figure>
<p> 在SubType构造函数内部调用SuperType构造函数时，实际上是为了SubType的实例设置了name属性，为了确保SuperType构造函数不会重写子类型的属性，可以在调用超类型构造函数后，再添加应该在子类型中定义的属性。</p>
<h2 id="借用构造函数的问题"><a href="#借用构造函数的问题" class="headerlink" title="借用构造函数的问题"></a>借用构造函数的问题</h2><p> 如果仅仅使用构造函数，那么方法都在构造函数中定义，就无法实现函数复用。在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。所以很少单独使用构造函数。</p>
<h1 id="组合继承（最常用的继承模式）"><a href="#组合继承（最常用的继承模式）" class="headerlink" title="组合继承（最常用的继承模式）"></a>组合继承（最常用的继承模式）</h1><p> 组合继承（combination inheritance），指将原型链和借用构造函数的技术组合在一起，背后的思想是使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"white"</span>,<span class="string">"black"</span>,<span class="string">"red"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="comment">//继承实例属性</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>,name);</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();<span class="comment">//继承原型属性和方法</span></div><div class="line">SubType.prototype.constructor = SubType;</div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"lijingjing"</span>,<span class="number">22</span>);</div><div class="line">instance1.colors.push(<span class="string">"blue"</span>);</div><div class="line">alert(instance1.colors);<span class="comment">//white,black,red,blue</span></div><div class="line">instance1.sayName();<span class="comment">//lijingjing</span></div><div class="line">instance1.sayAge();<span class="comment">//22</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Jessica"</span>,<span class="number">22</span>);</div><div class="line">alert(instance2.colors);<span class="comment">//white,black,red</span></div><div class="line">instance2.sayName();<span class="comment">//Jessica</span></div><div class="line">instance2.sayAge();<span class="comment">//22</span></div></pre></td></tr></table></figure>
<p> 组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，是JS中最常用的继承模式。而且，instanceof和isProtptypeOf()也能够用于识别基于组合继承创建的对象。</p>
<h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><p> 借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。道格拉斯-克罗克福德给出了如下函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//本质上讲object()对传入其中的对象执行了一次浅复制。</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"lijingjing"</span>,</div><div class="line">    <span class="attr">friends</span> : [<span class="string">"HouXinran"</span>,<span class="string">"LvQiuyi"</span>,<span class="string">"JiaLinlin"</span>,<span class="string">"ZhangYan"</span>]</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> anotherPerson = object(person);</div><div class="line">  anotherPerson.name = <span class="string">"Jessica"</span>;</div><div class="line">  anotherPerson.friends.push(<span class="string">"HuJieqiong"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> yetAnotherPerson = object(person);</div><div class="line">  yetAnotherPerson.name = <span class="string">"Seyi"</span>;</div><div class="line">  yetAnotherPerson.friends.push(<span class="string">"LiPeipei"</span>);</div><div class="line"></div><div class="line">  alert(person.friends);<span class="comment">//"HouXinran,LvQiuyi,JiaLinlin,ZhangYan,HuJieqiong,LiPeipei"</span></div></pre></td></tr></table></figure>
<p> 原型式继承要求必须有一个对象可以作为另一个对象的基础。上述的例子是实质上创建了person对象的两个副本。ECMAScript5通过新增Object.create()方法规范了原型式继承。这个方法接收两个参数，一个用作新对象原型的对象和（可选）一个为新对象定义额外属性的对象。在传入一个对象的情况下，Object.create()与object()方法的行为相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span> : <span class="string">"lijingjing"</span>,</div><div class="line">  <span class="attr">friends</span> : [<span class="string">"HouXinran"</span>,<span class="string">"LvQiuyi"</span>,<span class="string">"JiaLinlin"</span>,<span class="string">"ZhangYan"</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person);</div><div class="line">anotherPerson.name = <span class="string">"Jessica"</span>;</div><div class="line">anotherPerson.friends.push(<span class="string">"HuJieqiong"</span>);</div><div class="line">alert(anotherPerson.name);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yetAnotherPerson = <span class="built_in">Object</span>.create(person);</div><div class="line">yetAnotherPerson.name = <span class="string">"Seyi"</span>;</div><div class="line">yetAnotherPerson.friends.push(<span class="string">"LiPeipei"</span>);</div><div class="line">alert(yetAnotherPerson.name);</div><div class="line"></div><div class="line">alert(person.friends);<span class="comment">//"HouXinran,LvQiuyi,JiaLinlin,ZhangYan,HuJieqiong,LiPeipei"</span></div></pre></td></tr></table></figure>
<p> Object.create()方法的第二个参数与Object.defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的，以这种方式制定的任何属性都会覆盖原型对象上的同名属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">name</span> : <span class="string">"lijingjing"</span>,</div><div class="line">  <span class="attr">friends</span> : [<span class="string">"HouXinran"</span>,<span class="string">"LvQiuyi"</span>,<span class="string">"JiaLinlin"</span>,<span class="string">"ZhangYan"</span>]<span class="comment">//引用类型</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person,&#123;</div><div class="line">  <span class="attr">name</span>: &#123;</div><div class="line">    <span class="attr">value</span>:<span class="string">"Jessica"</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">alert(anotherPerson.name);<span class="comment">//"Jessica"</span></div></pre></td></tr></table></figure>
<p><strong>使用原型式继承时要注意，包含引用类型值的属性始终都会共享相应的值，就像使用原型模式一样。</strong></p>
]]></content>
    
    <summary type="html">
    
      JavaScrip继承
    
    </summary>
    
      <category term="学习笔记" scheme="http://lijingjing.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://lijingjing.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javascript/"/>
    
    
      <category term="面向对象" scheme="http://lijingjing.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS创建对象</title>
    <link href="http://lijingjing.top/blog/2016/04/21/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>http://lijingjing.top/blog/2016/04/21/JS创建对象/</id>
    <published>2016-04-21T02:29:17.000Z</published>
    <updated>2016-05-17T02:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中的对象"><a href="#JS中的对象" class="headerlink" title="JS中的对象"></a>JS中的对象</h1><p> 面向对象的语言有一个标志，那就是它们都有类的概念，而通过类可以创建任意多个具有相同属性和方法的对象。ECMAScript没有类的概念。因此它的对象也与基于类的语言中的对象有所不同。<br> ECMA-262把对象定义为：”无序属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或者方法都有一个名字，而每个名字都映射到一个值。所以我们可以把ECMAScript的对象想象成散列表：一组名值对，其中值可以是数据或者函数。</p>
<h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><p> 使用Object构造函数或者字面量都可以创建单个对象，但是使用这些方法，会使用同一个接口创建很多对象，就会产生大量的重复代码。所以，引入工厂模式：</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p> 用函数来封装以特定接口创建对象的细节。以函数调用的方式，创建一个对象。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.job = job;</div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'Nicolas'</span>,<span class="number">29</span>,<span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>);</div></pre></td></tr></table></figure>
<p> 工厂模式虽然解决了多个相似对象的问题，但却没有解决对象识别的问题（即怎么知道一个对象的类型）。下面引入构造函数模式：</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicolas'</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p> 创建一个构造函数的实例时，必须使用new操作符，以这种方式调用构造函数实际上会经历以下四个步骤：</p>
<ol>
<li>创建一个函数</li>
<li>将构造函数的作用域赋给新对象（因此，this就指向了这个新对象）</li>
<li>执行构造函数中的代码（为这个新对象添加属性）</li>
<li>返回新对象</li>
</ol>
<p> person1和person2分别保存着Person的一个不同的实例。这两个对象都有一个constructor(构造函数)属性，该属性指向Person。如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alert(person1.constructor == Person); <span class="comment">// true</span></div><div class="line">alert(person2.constructor == Person); <span class="comment">//true</span></div><div class="line"><span class="comment">//更靠谱的检测对象类型还是使用Instanceof</span></div><div class="line">alert(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></div><div class="line">alert(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div><div class="line">alert(person2 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></div><div class="line">alert(person2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p> 创建自定义的构造函数意味着将来以及将它的实例标识为一种特定的类型，而这正是构造函数模式胜过工厂模式的地方。</p>
<h3 id="将构造函数当做函数"><a href="#将构造函数当做函数" class="headerlink" title="将构造函数当做函数"></a>将构造函数当做函数</h3><p> 构造函数与其他函数的唯一区别，就在于调用它们的方式不同。任何函数，只要通过new操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过new操作符来调用，那它和普通函数没有区别。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当做构造函数使用</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line">person.sayName();<span class="comment">//'Nicholas'</span></div><div class="line"></div><div class="line"><span class="comment">//作为普通函数调用</span></div><div class="line">Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line"><span class="comment">//添加到window,在全局作用域中调用一个函数时，this对象总是指向Global对象（在浏览器中就是window对象）</span></div><div class="line"><span class="built_in">window</span>.sayName();<span class="comment">//"Greg"</span></div><div class="line"></div><div class="line"><span class="comment">//在另一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"Kristen"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</div><div class="line"><span class="comment">//在对象o的作用域中带哦用，因此调用后o就拥有了所有属性和sayName方法。</span></div><div class="line">o.sayName();<span class="comment">//"Kristen"</span></div></pre></td></tr></table></figure>
<h3 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h3><p> 使用构造函数的主要问题是，每个方法都要在每个实例上重新创建一遍。例如，前面的例子中，person1和person2都有一个名为sayName()的方法，两个方法不是同一个Function的实例。<strong>在ECMAScript中，函数就是对象，因此每定义一个函数，也就是实例化了一个对象。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert(this.name)"</span>);<span class="comment">//与声明函数在逻辑上是等价的</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicolas'</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line">alert(person1.sayName == person2.sayName);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p> 利用构造函数来创建对象，会导致不同作用域链和标识符解析，但创建Function新实例的机制是相同的，即，不同实例上的同名函数是不相等的。  创建两个完成同样任务的Function实例的确没有必要，有this对象在，根本不用在执行代码前就把函数绑定到特定对象上。可以通过下面方式，解决上述问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = sayName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicolas'</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p> 将sayName属性设置成等于全局的sayName函数，sayName包含的是一个指向函数的指针，因此person1和person2对象就共享了在全局作用域中定义的同一个sayName()函数。这样做虽然解决了两个函数做同一件事的问题，但是全局作用域中定义的函数实际上只能被某个对象调用，如果对象需要定义很多方法，那么就要定义很多个全局函数，这个自定义的引用类型就没有封装性可言了。上述问题，可以通过使用原型模式来解决。</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p> 我们创建的每个函数都有一个prototype(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。prototype就是通过调用构造函数而创建的那个对象实例的原型对象。  使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法，即，不必在构造函数中定义对象实例的信息，而是将这些信息，直接添加到原型对象中。</p>
<h3 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h3><p> 无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。  在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。  创建了自定义的构造函数后，其原型对象默认只会取得constructor属性，至于其他方法，都是从Object继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。<strong>连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>（）</span>&#123;</div><div class="line">  alert（<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> persona();</div><div class="line">persona.sayName(); <span class="comment">//"Nicholas"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> persona();</div><div class="line">person2.sayName(); <span class="comment">//"Nicholas"</span></div><div class="line">alert(person1.sayName == person2.sayName); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><img src="/images/prototype.png" alt="构造函数-实例-原型对象"></p>
<p> 如果实例中的属性与原型中的属性同名，那么将会屏蔽原型中的那个属性，但是不会修改原型中的属性。使用delete操作符可以删除实例属性，从而重新访问原型中的属性。</p>
<h3 id="原型和in操作符"><a href="#原型和in操作符" class="headerlink" title="原型和in操作符"></a>原型和in操作符</h3><h4 id="判断一个属性存在于对象中还是原型中"><a href="#判断一个属性存在于对象中还是原型中" class="headerlink" title="判断一个属性存在于对象中还是原型中"></a>判断一个属性存在于对象中还是原型中</h4><p> in操作符与hasOwnProperty()方法同时使用。attribute in object，不管属性存在于对象中还是原型中，都会返回true。如果实例中重写了相关属性，那么访问到的是实例中的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> !<span class="built_in">Object</span>.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h4><p> 在使用for-in循环时，返回的是所有能够通过对象访问的、可枚举的属性，其中既包括存在于实例中的属性， 也包括存在于原型中的属性。屏蔽了原型中不可枚举的属性的实例属性（即实例重写了原型属性）也会在for-in循环中返回。（根据规定，所有开发人员定义的属性都是可枚举的-只有在IE8及更早版本中例外）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 要取得对象上所有可枚举的实例属性，可以使用ECMAScript5的Object.keys()方法。这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。如果参数是原型对象，则返回原型对象的所有属性；如果参数是实例，则只返回实例定义的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>（）</span>&#123;</div><div class="line">  alert（<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</div><div class="line">alert(keys);<span class="comment">// "name, age, job, sayName"，keys保存一个字符串数组</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line">p1.name = <span class="string">"Rob"</span>;</div><div class="line">p1.age = <span class="number">31</span>;</div><div class="line"><span class="keyword">var</span> p1keys = <span class="built_in">Object</span>.keys(p1);</div><div class="line">alert(p1keys);<span class="comment">// "name,age"</span></div><div class="line"></div><div class="line"><span class="comment">//如果想要得到所有实例属性，无论它是否可枚举，都可以使用Object.getOwnPropertyNames()方法。</span></div><div class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(Person.prototype);</div><div class="line">alert(keys);<span class="comment">//"constructor, name, age, job, sayName"</span></div></pre></td></tr></table></figure>
<h3 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h3><p> 用一个包含所有属性和方法的对象字面量来重写整个原型对象。将Person.prototype设置为等于一个以对象字面量形式创建的新对象，那么，<strong>constructor属性不再指向Person了。前面的例子，每创建一个函数，就会同时创建它的prototype对象，这个对象也会自动获得constructor属性。而我们利用对象字面量形式创建原型对象时，本质上重写了默认的prototype对象，因此constructor属性也就变成了新对象的constructor属性（指向Object构造函数），不再指向Person函数。此时，尽管instanceof操作符还能返回正确的结果，但不能通过constructor确定对象类型了。</strong>  支持ECMAScript5的JS引擎，可以使用Object.defineProperty()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Person.prototype = &#123;</div><div class="line"><span class="comment">//如果constructor的值真的很重要，则设置对应的属性值,但是现在constructor属性就会变成可以枚举的</span></div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    name: "Nicolas",</div><div class="line">    age: 23,</div><div class="line">    job: "Software Engineering",</div><div class="line">    sayName: function()&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">//支持ECMAScript5的引擎，重设构造函数</span></div><div class="line">  <span class="built_in">Object</span>.defineProperty(Person.prototype,<span class="string">"constructor"</span>,&#123;</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">value</span>: Person</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">  alert(friend <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></div><div class="line">  alert(friend <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></div><div class="line">  alert(friend.constructor == Person);<span class="comment">//false</span></div><div class="line">  alert(friend.constructor == <span class="built_in">Object</span>);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> friend = <span class="keyword">new</span> Person();<span class="comment">//friend指向的原型对象没有sayName函数</span></div><div class="line"></div><div class="line">  Person.prototype = &#123;</div><div class="line"><span class="comment">//如果constructor的值真的很重要，则设置对应的属性值,但是现在constructor属性就会变成可以枚举的</span></div><div class="line">    <span class="keyword">constructor</span>: Person,</div><div class="line">    name: "Nicolas",</div><div class="line">    age: 23,</div><div class="line">    job: "Software Engineering",</div><div class="line">    sayName: function()&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  friend.sayName();<span class="comment">//error</span></div></pre></td></tr></table></figure>
<p><img src="/images/rewrite_prototype.png" alt="构造函数-实例-原型对象-重写原型对象">  </p>
<p>重写原型对象切断了现有原型与任何之前已经存在的对象实例之间的联系；它们引用的仍然是最初的原型。</p>
<h3 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h3><p> 所有的原生对象（Array、Object、String,等等）都在其构造函数的原型上定义了方法。通过原生对象的原型，不仅可以取得所有默认方法的引用，而且也可以定义新方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。</p>
<h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><p> 忽略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。</p>
<h2 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h2><p> 创建自定义类型的最常见的方式，就是组合使用构造函数模式和原型模式。 <strong>构造函数模式用于定义实例属性（每个实例都会有自己的一份实例属性的副本），而原型模式用于定义方法和共享的属性（每个实例共享对方法的引用）。</strong> 这种混合模式还支持向构造函数传递参数。(是一种定义引用类型的模式？？？我不是很懂 = =)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span> : Person,</div><div class="line">  <span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineering"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"Van"</span>);</div><div class="line">alert(person1.friends);<span class="comment">// "Shelby, Court,Van"</span></div><div class="line">alert(person2.friends);<span class="comment">// "Shelby, Court"</span></div><div class="line">alert(person1.friends === person2.friends);<span class="comment">//false</span></div><div class="line">alert(person1.sayName === person2.sayName);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><p> 把所有信息都封装在构造函数中，在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。即，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。<br> <strong>使用动态原型模式时，不能使用对象字面量重写原型。如果存在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line"></div><div class="line"><span class="comment">//下面的代码只有在初次调用构造函数时才会执行</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName !- <span class="string">"function"</span>)&#123;</div><div class="line">      Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29.</span> <span class="string">"Software Engineering"</span>);</div><div class="line">  friends.sayName();</div></pre></td></tr></table></figure>
<h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><p>  创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象。<br>  除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式和工厂模式其实一模一样。构造函数在不返回值的情况下，默认会返回新对象实例。而通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//工厂模式</span></div><div class="line">  <span class="keyword">var</span> person1 = Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line"></div><div class="line"><span class="comment">//寄生构造函数模式</span></div><div class="line">  <span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineering"</span>);</div><div class="line">  friend.sayName();<span class="comment">// "NIcholas"</span></div></pre></td></tr></table></figure>
<p> 这个模式在特殊情况下用来为对象创建构造函数。假设想创建一个具有额外方法的特殊数组，由于不能直接修改Array构造函数，因此可以使用这个模式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//创建数组</span></div><div class="line">  values.push.apply(values, <span class="built_in">arguments</span>);<span class="comment">//添加值</span></div><div class="line">  <span class="comment">//添加方法</span></div><div class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//返回数组</span></div><div class="line">  <span class="keyword">return</span> values;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</div><div class="line">alert(colors.toPipedString());<span class="comment">//“red|blue|green”</span></div></pre></td></tr></table></figure>
<p><strong>关于寄生构造函数模式，有一些问题需要声明。</strong></p>
<ol>
<li>返回的对象与构造函数或者与构造函数的原型属性之间没有关系。即构造函数返回的对象与在构造函数外部创建的对象没有什么不同。</li>
<li>不能依赖instanceof操作符来确定对象类型。</li>
<li>可以使用其他模式的情况下，不要使用这种模式。</li>
</ol>
<h2 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h2><p> 稳妥对象（durable objects），指没有公共属性，而且其方法也不引用this的对象。稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用this和new），或者在防止数据被其他应用程序（如Mashup程序）中改动时使用。稳妥构造函数遵循与寄生构造函数类似的模式，但是有两点不同：</p>
<ol>
<li>新创建对象的实例方法不引用this对象。</li>
<li>不适用new操作符调用构造函数。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">//可以定义私有变量和函数</span></div><div class="line"></div><div class="line">o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(name);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> o;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineering"</span>);   </div><div class="line">friend.sayName();<span class="comment">// "NIcholas"</span></div></pre></td></tr></table></figure>
<p> 变量friend中保存的是一个稳妥对象，除了调用sayName方法外，没有别的方式可以访问其数据成员。即使有其他代码会给这个对象添加方法或数据成员，但也不可能有别的方法访问传入到构造函数中的原始数据</p>
<p><strong>使用稳妥构造函数模式创建的对象与构造函数之间也没有什么关系，因此instanceof操作符对这种对象也没有意义。</strong></p>
]]></content>
    
    <summary type="html">
    
      JavaScrip创建对象的一些方法总结
    
    </summary>
    
      <category term="学习笔记" scheme="http://lijingjing.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://lijingjing.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javascript/"/>
    
    
      <category term="面向对象" scheme="http://lijingjing.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>回调函数将结果顺序存放</title>
    <link href="http://lijingjing.top/blog/2016/04/19/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%B0%86%E7%BB%93%E6%9E%9C%E9%A1%BA%E5%BA%8F%E5%AD%98%E6%94%BE/"/>
    <id>http://lijingjing.top/blog/2016/04/19/回调函数将结果顺序存放/</id>
    <published>2016-04-19T07:55:08.000Z</published>
    <updated>2016-04-22T07:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的碎碎念"><a href="#我的碎碎念" class="headerlink" title="我的碎碎念"></a>我的碎碎念</h1><p>  这是之前做最美食项目时碰到的一个问题，在整理笔记的时候看到了，发现再碰到好像还是不会。。😢 所以，还是再整理一下吧。</p>
<h1 id="问题阐述"><a href="#问题阐述" class="headerlink" title="问题阐述"></a>问题阐述</h1><p> 已知经纬度，利用百度地图进行定位，拿到城市信息，要求将定位得到的城市信息与后台返回的地址信息连接，形成一个详细的地理信息。已经忘记了这个奇怪的需求提出的原因，后来后台会返回对应的城市信息，不需要利用百度地图进行定位。╮(╯▽╰)╭，需求真的好乱。。。。但是碰到各种奇葩需求的时候，就是锻炼代码能力的时候了吧。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="简单的for循环"><a href="#简单的for循环" class="headerlink" title="简单的for循环"></a>简单的for循环</h2><p> 表示一开始天真的以为一个for循环就可以搞定。其实不是天真，是真的能力不行。。。那可是回调啊少年。。。应该不会有人和我一样蠢吧/(ㄒoㄒ)/~~ 具体代码，可以看下面的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DinningListService.getRestaurants($stateParam.search)</div><div class="line">  .success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length; i++)&#123;</div><div class="line">      <span class="keyword">var</span> restaurantPoint = <span class="keyword">new</span> BMap.point(data[i].longitude, data[i].latitude);</div><div class="line">      <span class="keyword">var</span> addComp;</div><div class="line">      gc.getLocation(restaurantPoint,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">        addComp = rs.addressComponents;</div><div class="line">        data[i].address = addComp.city + data[i].address;</div><div class="line">      &#125;);</div><div class="line">      data[i].distance = map.getDistance(point,restaurantPoint);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p> 所以，上面的方案肯定不行，因为我们不知道getLocation上面时候返回结果，而这个时候，for循环已经做完了。这样，i的值永远就是data,length-1啊。</p>
<h2 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h2><p> 让每个回调在上一个回调执行结束后，再执行下一个回调，当然了，这个效率不高。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">DinningListService.getRestaurants($stateParam.search)</div><div class="line">  .success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    $scope.results = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//一个新的数组来储存最后的结果集</span></div><div class="line">    <span class="comment">//将整个过程封装成一个回调函数，没有for循环</span></div><div class="line">    <span class="keyword">var</span> tempFunc = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> restaurantPoint = <span class="keyword">new</span> BMap.point(data[i].longitude, data[i].latitude);</div><div class="line">        <span class="keyword">var</span> addComp;</div><div class="line">        gc.getLocation(restaurantPoint,<span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">          addComp = rs.addressComponents;</div><div class="line">          data[i].address = addComp.city + data[i].address;</div><div class="line">          $scope.results[i] = data[i];</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span>(i &lt; data.length<span class="number">-1</span>)&#123;</div><div class="line">          tempFunc(i+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">          $scope.$apply();</div><div class="line">        &#125;</div><div class="line">        data[i].distance = map.getDistance(point,restaurantPoint);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    tempFunc(<span class="number">0</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><p> ╮(╯▽╰)╭ 这种方法才是真正的前端开发人员应该想到的方法啊！然而我只觉着可以这么写，具体怎么写还是请教的大神 😢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DinningListService.getRestaurants($stateParam.search)</div><div class="line">  .success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length; i++)&#123;</div><div class="line">      <span class="keyword">var</span> restaurantPoint = <span class="keyword">new</span> BMap.point(data[i].longitude, data[i].latitude);</div><div class="line">      <span class="keyword">var</span> addComp;</div><div class="line">      gc.getLocation(restaurantPoint,<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</div><div class="line">          addComp = rs.addressComponents;</div><div class="line">          data[i].address = addComp.city + data[i].address;</div><div class="line">          $scope.$apply();</div><div class="line">        &#125;    </div><div class="line">      &#125;(i));<span class="comment">//返回的是函数执行后的结果，即传入的i值是当时循环过程中的值</span></div><div class="line">      data[i].distance = map.getDistance(point,restaurantPoint);</div><div class="line">    &#125;</div><div class="line">    $scope.results = data;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>#总结</p>
<ol>
<li>闭包是个必须要掌握的概念。</li>
<li>回调的思想一定要牢牢记住。</li>
<li>应该好好看看红皮书了。基础知识还是不牢固😭</li>
</ol>
]]></content>
    
    <summary type="html">
    
      回调函数中存放数组值
    
    </summary>
    
      <category term="javascript" scheme="http://lijingjing.top/categories/javascript/"/>
    
    
      <category term="闭包" scheme="http://lijingjing.top/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="回调" scheme="http://lijingjing.top/tags/%E5%9B%9E%E8%B0%83/"/>
    
      <category term="递归" scheme="http://lijingjing.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>hexo发布文章</title>
    <link href="http://lijingjing.top/blog/2016/04/12/hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://lijingjing.top/blog/2016/04/12/hexo发布文章/</id>
    <published>2016-04-12T14:28:49.000Z</published>
    <updated>2016-04-13T05:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo发布Blog"><a href="#Hexo发布Blog" class="headerlink" title="Hexo发布Blog"></a>Hexo发布Blog</h1><p> 哎呀呀，真是服了自己了。没事学学技术，写写文章多好。三月份过得真是不怎么酷。然后发现四月份也过了一半了，我现在有点儿慌，人生不能这么颓废下去，我还是适合去找一个好工作养活自己。<br> 废话了这么多，其实这篇文章，是为了让自己重拾Hexo写的，因为当时的速成，让我忘记了如何利用Hexo来写文章了。<br> 天啊，我又要去搜Markdown语法了，换行怎么搞什么的。。。醉醉的。果然，学习的步伐永远不能停止。<br> 原来Markdown的换行只需要在最后的句子后面打两个空格就好了，首行缩进需要<code>&amp;emsp;</code>来显示地进行换行操作，有其他更好的方法嘛/(ㄒoㄒ)/~~<br> 先复习到这里吧，接下来看看如何把这篇文章发布出去。对了，cd到blog的根目录下，执行<code>hexo n 文章标题名</code>,就可以在source文件夹下的_posts文件夹下，看到生成的.md文章。之后<code>hexo g</code>就可以生成相应的Html文件，最后<code>hexo d</code>就可以部署到github上了~<br> 我回来再看这篇文章发现，<code>&amp;emsp;</code>没有了，换行变成了<code>&lt;br&gt;</code>，什么鬼。但是我自己写<code>&lt;br&gt;</code>后面跟一个空格，还是没有首行缩进的效果，so sad,我真的不是很懂Markdown。</p>
]]></content>
    
    <summary type="html">
    
      hexo发布文章步骤。
    
    </summary>
    
      <category term="Hexo" scheme="http://lijingjing.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lijingjing.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>H5上传图片</title>
    <link href="http://lijingjing.top/blog/2016/02/25/H5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://lijingjing.top/blog/2016/02/25/H5上传图片/</id>
    <published>2016-02-25T14:54:59.000Z</published>
    <updated>2016-04-13T06:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的碎碎念"><a href="#我的碎碎念" class="headerlink" title="我的碎碎念"></a>我的碎碎念</h1><p> 其实H5读取文件什么的还是很方便的吧。<br> 问题一：我觉着利用H5来读取图片文件没什么问题，网上的代码一搜一大把，但是最神烦的是手机拍照后上传图片，因为手机的摄像头方向不是你看到的正着的，它的角度有问题啊。。。你的手机是自己把照片的角度旋转后展现给你的，所以如果你直接拍照后，将刚拍的照片当做上传的图片，你存到后台的图片是侧着的，或者倒着的，看你拍照时候摄像头的方向吧。。。然后项目中还要图片剪裁，所以说先剪裁还是先旋转这个问题我纠结好久，最后发现还是先旋转后剪裁吧，因为用的别人的插件，先剪裁后旋转，没有成功。。<br> 问题二：然后，前几天做web应用的图片上传，因为后台上传图片的接口早写好了，是一个上传文件的统一接口，所以我不能直接传base64过去，后台不支持我的数据格式，后台接收的数据格式是<code>content-tyle=multipart/*</code>，这个是什么格式呢，google之后发现以FormData的形式传到后台是可以的。就是要传一个file过去，base64的话传过去的是String吧。</p>
<h1 id="移动应用拍照上传图片"><a href="#移动应用拍照上传图片" class="headerlink" title="移动应用拍照上传图片"></a>移动应用拍照上传图片</h1><h2 id="库-工具"><a href="#库-工具" class="headerlink" title="库/工具"></a>库/工具</h2><ol>
<li><a href="https://github.com/exif-js/exif-js" target="_blank" rel="external">exif.js</a>,读取图片元信息，获取照片本身的Orientation</li>
<li><a href="https://github.com/stomita/ios-imagefile-megapixel" target="_blank" rel="external">megapix-image.js</a>，来进行图片最终的旋转，按照orientation来写入图片数据</li>
<li><a href="https://github.com/scottcheng/cropit" target="_blank" rel="external">cropit.js</a>，图片剪裁的插件</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"display-ib per60 tc"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"head-logo"</span></span></div><div class="line">                           <span class="attr">class</span>=<span class="string">"bg-gray displayImg tc display-ib pos-r img-circle w-80 ht80 l-ht80 border border-purple vertical-a-m cursor-p overflow-h"</span>&gt;上传头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"head-logo"</span> <span class="attr">class</span>=<span class="string">"top-200 pos-a"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"imgUrl"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"cvs"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"></div><div class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-editor"</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cropit-image-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-size-label"</span>&gt;</span></div><div class="line">                           滑动调整图片大小</div><div class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">class</span>=<span class="string">"cropit-image-zoom-input"</span></span></div><div class="line">                              <span class="attr">style</span>=<span class="string">"width: 80%;margin: 10px auto;text-align: center"</span>&gt;</div><div class="line">                       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn-sm btn-default btn-warning export mr25"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></div><div class="line">                               <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-scissors mr10"</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>裁剪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn-sm btn-black mt10 cancelImage"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></div><div class="line">                               <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove mr10"</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"font-red ml10 display-n"</span>&gt;</span>这里是错误信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因为在使用megapix-image.js的时候需要使用canvas来获取旋转后的图片，之后传到后台，所以在Html文件中，放了一个隐藏的<code>&lt;canvas&gt;</code>。</p>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><h3 id="为-lt-input-type-39-file-39-gt-添加监听器。"><a href="#为-lt-input-type-39-file-39-gt-添加监听器。" class="headerlink" title="为&lt;input type=&#39;file&#39;/&gt;添加监听器。"></a>为<code>&lt;input type=&#39;file&#39;/&gt;</code>添加监听器。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayImg</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'head-logo'</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> FileReader === <span class="string">'undefined'</span>) &#123;</div><div class="line">        result.innerHTML = <span class="string">"抱歉，你的浏览器不支持 FileReader"</span>;</div><div class="line">        input.setAttribute(<span class="string">'disabled'</span>, <span class="string">'disabled'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        file.addEventListener(<span class="string">'change'</span>, readFile, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>];</div><div class="line">    $(<span class="string">'.image-editor'</span>).show();</div><div class="line">    <span class="keyword">if</span> (file) &#123;</div><div class="line">        <span class="comment">//验证图片文件类型</span></div><div class="line">        <span class="keyword">if</span> (file.type &amp;&amp; !<span class="regexp">/image/i</span>.test(file.type)) &#123;</div><div class="line">            alert(<span class="string">"文件必须为图片！"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">        reader.readAsDataURL(file);</div><div class="line">        reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line"></div><div class="line">            render(file, <span class="keyword">this</span>.result);<span class="comment">//旋转图片逻辑</span></div><div class="line">            <span class="comment">//readAsDataURL后执行onload，进入图片压缩逻辑</span></div><div class="line">            <span class="comment">//e.target.result得到的就是图片文件的base64 string</span></div><div class="line">            $(<span class="string">'.export'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="comment">//imageData现在拿到的是旋转过的图片信息</span></div><div class="line">                <span class="keyword">var</span> imageData = $(<span class="string">'.image-editor'</span>).cropit(<span class="string">'export'</span>);</div><div class="line">                <span class="keyword">var</span> img = $(<span class="string">'&lt;img  id="imgsrc" width="80" height="80"&gt;'</span>);</div><div class="line">                img.attr(<span class="string">"src"</span>, imageData);</div><div class="line">                $(<span class="string">".displayImg"</span>).html(img);</div><div class="line">                $(<span class="string">"#imgUrl"</span>).val(imageData.split(<span class="string">","</span>)[<span class="number">1</span>]);</div><div class="line"></div><div class="line">                $(<span class="string">".image-editor"</span>).hide();</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.result;</div><div class="line">            <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">            img.src = result;</div><div class="line">            img.width = <span class="number">80</span>;</div><div class="line">            img.height = <span class="number">80</span>;</div><div class="line">            $(<span class="string">".displayImg"</span>).html(img);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="利用Exif-js和megapix-image-js进行图片信息获取，和根据图片orientation来进行图片旋转。"><a href="#利用Exif-js和megapix-image-js进行图片信息获取，和根据图片orientation来进行图片旋转。" class="headerlink" title="利用Exif.js和megapix-image.js进行图片信息获取，和根据图片orientation来进行图片旋转。"></a>利用Exif.js和megapix-image.js进行图片信息获取，和根据图片orientation来进行图片旋转。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义照片的最大高度</span></div><div class="line"><span class="keyword">var</span> MAX_HEIGHT = <span class="number">480</span>;</div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">file, src</span>) </span>&#123;</div><div class="line">    EXIF.getData(file, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//获取照片本身的Orientation</span></div><div class="line">        <span class="keyword">var</span> orientation = EXIF.getTag(<span class="keyword">this</span>, <span class="string">"Orientation"</span>);</div><div class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">        image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//image.src = src;</span></div><div class="line">            <span class="keyword">var</span> cvs = <span class="built_in">document</span>.getElementById(<span class="string">"cvs"</span>);</div><div class="line">            <span class="keyword">var</span> w = image.width;</div><div class="line">            <span class="keyword">var</span> h = image.height;</div><div class="line">            <span class="comment">//计算压缩后的图片长和宽</span></div><div class="line">            <span class="keyword">if</span> (h &gt; MAX_HEIGHT) &#123;</div><div class="line">                w *= MAX_HEIGHT / h;</div><div class="line">                h = MAX_HEIGHT;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//使用MegaPixImage封装照片数据</span></div><div class="line">            <span class="keyword">var</span> mpImg = <span class="keyword">new</span> MegaPixImage(image);</div><div class="line">            <span class="comment">//按照Orientation来写入图片数据，回调函数是上传图片到服务器</span></div><div class="line">            mpImg.render(cvs, &#123;<span class="attr">maxWidth</span>: w, <span class="attr">maxHeight</span>: h, <span class="attr">orientation</span>: orientation&#125;, sendImg);</div><div class="line">        &#125;;</div><div class="line">        image.src = src;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> sendImg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cvs = <span class="built_in">document</span>.getElementById(<span class="string">"cvs"</span>);</div><div class="line">    <span class="comment">//调用Canvas的toDataURL接口，得到的是照片文件的base64编码string</span></div><div class="line">    <span class="keyword">var</span> data = cvs.toDataURL(<span class="string">"image/jpeg"</span>);</div><div class="line">    <span class="comment">//base64 string过短显然就不是正常的图片数据了，过滤。</span></div><div class="line">    <span class="keyword">if</span> (data.length &lt; <span class="number">48</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"data error."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $(<span class="string">'.image-editor'</span>).cropit(<span class="string">'imageSrc'</span>, data);<span class="comment">//裁剪的是旋转过的图片</span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="上传图片到服务器"><a href="#上传图片到服务器" class="headerlink" title="上传图片到服务器"></a>上传图片到服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uploadImg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> uploadUrl = <span class="string">"服务器地址"</span>;</div><div class="line">            <span class="keyword">var</span> uploadData = &#123;</div><div class="line">                <span class="string">'phoneId'</span>: phone,</div><div class="line">                <span class="string">'imageValue'</span>: $(<span class="string">"#imgUrl"</span>).val()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ($(<span class="string">"#imgUrl"</span>).val() == <span class="string">""</span>) &#123;</div><div class="line">                alert(<span class="string">"保存成功"</span>);</div><div class="line">                <span class="built_in">window</span>.location.href = <span class="string">"usercenter.html"</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="attr">url</span>: uploadUrl,</div><div class="line">                    <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">                    <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(uploadData),</div><div class="line">                    <span class="attr">contentType</span>: <span class="string">'application/json'</span>,</div><div class="line">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (data.success) &#123;</div><div class="line">                            alert(<span class="string">"保存成功"</span>);</div><div class="line">                            <span class="built_in">window</span>.location.href = <span class="string">"usercenter.html"</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;();</div></pre></td></tr></table></figure>
<h1 id="Web应用上传图片"><a href="#Web应用上传图片" class="headerlink" title="Web应用上传图片"></a>Web应用上传图片</h1><h2 id="后台接收数据格式为：multipart"><a href="#后台接收数据格式为：multipart" class="headerlink" title="后台接收数据格式为：multipart/*"></a>后台接收数据格式为：multipart/*</h2><h2 id="HTML代码-1"><a href="#HTML代码-1" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"avatar-teacher"</span> <span class="attr">ng-controller</span>=<span class="string">"StudentAvatarCtrl"</span> <span class="attr">class</span>=<span class="string">"pos-r"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"avatar-teacher"</span> <span class="attr">class</span>=<span class="string">"pos-a top-200"</span>/&gt;</span>                     </div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-click</span>=<span class="string">"readAvatar()"</span> <span class="attr">ng-show</span>=<span class="string">"currentUser.photo==null"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;avatarSource&#125;&#125;"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-click</span>=<span class="string">"readAvatar()"</span> <span class="attr">ng-show</span>=<span class="string">"currentUser.photo!=null"</span> <span class="attr">class</span>=<span class="string">"avatar"</span></span></div><div class="line">                                     <span class="attr">src</span>=<span class="string">"/VPFile&#123;&#123;currentUser.photo&#125;&#125;"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$scope.readAvatar = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'avatar-teacher'</span>);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> FileReader === <span class="string">'undefined'</span>) &#123;</div><div class="line">                    result.innerHTML = <span class="string">"抱歉，你的浏览器不支持 FileReader"</span>;</div><div class="line">                    input.setAttribute(<span class="string">'disabled'</span>, <span class="string">'disabled'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    file.addEventListener(<span class="string">'change'</span>, readFile, <span class="literal">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div></pre></td></tr></table></figure>
<h2 id="读取文件并上传"><a href="#读取文件并上传" class="headerlink" title="读取文件并上传"></a>读取文件并上传</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>];</div><div class="line">                <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">                fd.append( <span class="string">"file"</span>, <span class="keyword">this</span>.files[<span class="number">0</span>]);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> reqUpload = &#123;</div><div class="line">                    <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">                    <span class="attr">url</span>: <span class="string">'服务器地址'</span>,</div><div class="line">                    <span class="comment">//transformRequest: angular.identity,</span></div><div class="line">                    headers: &#123;</div><div class="line">                        <span class="string">'Access-Token'</span>: localStorage[<span class="string">'accessToken'</span>],</div><div class="line">                        <span class="string">'Content-Type'</span>: <span class="literal">undefined</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">data</span>: fd</div><div class="line"></div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                $http(reqUpload).success(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="comment">//do something you want to do</span></div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">                reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">// 通过 reader.result 来访问生成的 DataURL</span></div><div class="line">                    <span class="keyword">var</span> url = reader.result;</div><div class="line">                    $scope.avatarSource = url;</div><div class="line">                    $scope.$apply();<span class="comment">//让页面显示最新上传的图片</span></div><div class="line">                &#125;;</div><div class="line">                reader.readAsDataURL(file);</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>有空去好好学学canvas吧,满有用的。。。</li>
<li>学完canvas估计H5上传图片的问题会有更深入的了解，而且图片剪裁应该也不是问题了。</li>
<li>还是要好好学习啊，不要总任性。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      H5上传图片
    
    </summary>
    
      <category term="前端" scheme="http://lijingjing.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="H5" scheme="http://lijingjing.top/tags/H5/"/>
    
      <category term="拍照上传" scheme="http://lijingjing.top/tags/%E6%8B%8D%E7%85%A7%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>position与overflow</title>
    <link href="http://lijingjing.top/blog/2016/02/23/position%E4%B8%8Eoverflow/"/>
    <id>http://lijingjing.top/blog/2016/02/23/position与overflow/</id>
    <published>2016-02-23T14:42:47.000Z</published>
    <updated>2016-04-22T07:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在做最美食项目的时候，预定系统的首页利用了<a href="https://github.com/mattbryson/TouchSwipe-Jquery-Plugin" target="_blank" rel="external">TouchSwipe</a>，由于这部分主要是一个学弟写的，对其中的代码不是很熟悉，在修改向右移动左边距出现的bug时，对其进行了了解。然后就不知道怎么点击到<a href="https://jsfiddle.net/4gk27ru1/" target="_blank" rel="external">移动端滑动删除</a>实现的地方去了，运行完demo对其实现比较好奇，抛开使用的JS来说，单纯的CSS部分我已经看不懂了/(ㄒoㄒ)/~~</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>最后发现自己对CSS中的position属性还是理解不到位，在网上找到了<a href="http://zh.learnlayout.com/position.html" target="_blank" rel="external">学习CSS布局</a>一文，巩固了基础知识后，自己了创建了一个<a href="">demo</a>来验证自己的猜测。</p>
<p>#demo 代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2 green<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span> <span class="attr">id</span>=<span class="string">"div3"</span> &gt;</span>div3 yellow<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .div1&#123;</div><div class="line">        position: relative;</div><div class="line">        background-color: red;</div><div class="line">    &#125;</div><div class="line">    .div2&#123;</div><div class="line">        background-color: green;</div><div class="line">        width: 100%;</div><div class="line">        height: 100px;</div><div class="line">        position: absolute;</div><div class="line">        top:0;</div><div class="line">        left: 0;</div><div class="line">    &#125;</div><div class="line">    .div3&#123;</div><div class="line">        height: 30px;</div><div class="line">        background-color: yellow;</div><div class="line">        position: relative;</div><div class="line">        overflow: hidden;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="built_in">window</span>.onload = test();</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"div3"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="comment">/* Act on the event */</span></div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"div3"</span>).setAttribute(<span class="string">'style'</span>, <span class="string">'transform: translateX(100px)'</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="float-与-overflow"><a href="#float-与-overflow" class="headerlink" title="float 与 overflow"></a>float 与 overflow</h1><p>CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。<br>两个元素如果有共同的父元素，其中一个元素设置float属性，那么后一个元素会浮上来，如果希望元素仍不在同一行，那么可以为后一个元素添加clear属性，清除对应的浮动； 如果两个元素有不同的父元素，为含有float属性的元素的父元素添加overflow:hidden可以达到同样的效果。</p>
<h2 id="拥有相同父元素"><a href="#拥有相同父元素" class="headerlink" title="拥有相同父元素"></a>拥有相同父元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">.div4&#123;</div><div class="line">  float: left;</div><div class="line">  border-width: 3px;</div><div class="line">  border-style: solid;</div><div class="line">  border-color: green ;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div><div class="line">.clear-fix&#123;</div><div class="line">  clear: left;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div4'</span>&gt;</span>我是浮动到左边的div啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'clear-fix'</span>&gt;</span>我只是想测试一下浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="拥有不同父元素"><a href="#拥有不同父元素" class="headerlink" title="拥有不同父元素"></a>拥有不同父元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">.div4&#123;</div><div class="line">  float: left;</div><div class="line">  border-width: 3px;</div><div class="line">  border-style: solid;</div><div class="line">  border-color: green ;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line"></div><div class="line">&#125;</div><div class="line">.overflow-h&#123;</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'overflow-h'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'div4'</span>&gt;</span>我是浮动到左边的div啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我只是想测试一下浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>如果一个父元素的position设置为relative，其中一个子元素的position属性为absolute,另一个子元素的position属性为relative，那么position为relative的子元素相对的是父元素，会覆盖position为absolute的子元素。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      CSS定位
    
    </summary>
    
      <category term="移动应用" scheme="http://lijingjing.top/categories/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="position" scheme="http://lijingjing.top/tags/position/"/>
    
      <category term="overflow" scheme="http://lijingjing.top/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title>Hello World again</title>
    <link href="http://lijingjing.top/blog/2016/02/23/Hello-World-again/"/>
    <id>http://lijingjing.top/blog/2016/02/23/Hello-World-again/</id>
    <published>2016-02-23T01:23:21.000Z</published>
    <updated>2016-02-23T02:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Blog-搭建"><a href="#Hexo-Blog-搭建" class="headerlink" title="Hexo Blog 搭建"></a>Hexo Blog 搭建</h1><p> 从上学期就想着搭建自己的博客，但是由于太懒，一直拖。本来想着寒假的时候搭建起来，果然又再次高估了自己假期的学习能力。直到开学后，发现同组大神的博客搭建好了，所以就在昨晚花了三四个小时进行了搭建，因为之前就知道Hexo，网上也有一堆教程，所以搭建过程还算顺利，除了忘记在.yml文件中配置自己的github账号信息，github page一直出问题，搞了一个多小时，在解决过程中，还发现因为用的别人的模板，所以项目中存在两个.git文件，删掉了主题中的.git。</p>
]]></content>
    
    <summary type="html">
    
      终于搭建起来了博客。
    
    </summary>
    
      <category term="Hexo" scheme="http://lijingjing.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lijingjing.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
